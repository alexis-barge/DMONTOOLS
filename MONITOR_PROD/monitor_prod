#!/bin/bash
set -x
# This script is intended to be sourced from a main script. Not Stand Alone
# Basically it runs on the production machine, once the MEAN fields 
# have been computed (monthly, annual) and disposed on the respective 
# CONFIG-CASE-MEAN/YEAR/ directory.

# Each block corresponds to a particular monitoring task. Each block is supposed
# to be independant from the other (in particular, required file are downloaded
# via the rapatrie function, which does the job only if necessary.

# The different tasks are performed with the cdftools programs. CDFTOOLS is 
# added to the PATH.

#--------------------------------------------------------------
#   $Rev$
#   $Date$
#   $Id$
#--------------------------------------------------------------

if [ $# = 0 ] ; then
   echo 'USAGE : monitor_prod year'
   exit 1
fi

# take YEAR as the argument to this script
YEAR=$( printf "%04d" $1)

#define a variable for new_maskglo.nc for easy change later on
fbasinmask=new_maskglo.nc

# define some config dependent variable 
. ./config_def    # can be a link

#  Define some functions to get/put file from/to ergon (can be easily customized)
. ./function_def  # can be a link

NC4=${NC4:=0}
if [ $NC4 = 1 ] ; then NCOPT='-nc4' ; fi

VVL=${VVL:=0}
if [ $VVL = 1 ] ; then VVLOPT='-vvl' ; fi

FULL=${FULL:=0}
if [ $FULL != 0 ] ; then FULLOPT='-full' ; else FULLOPT='' ; fi

LIM3=${LIM3:=0}    # use LIM3 instead of LIM2  
                   # if LIM3=2 then icemodel is SI3
if [ $LIM3 = 1 ] ; then
   icemod=icemod3
   ileadfra=siconc
   iicethic=sithic
elif [ $LIM3 = 2 ] ; then
   icemod=icemod
   ileadfra=siconc
   iicethic=sithic
else
   icemod=icemod
   ileadfra=ileadfra
   iicethic=iicethic
fi

FLXT=${FLXT:=0}   # use separate files for atmospheric fluxes
if [ $FLXT = 1 ] ; then
   flxT=flxT
else
   flxT=gridT
fi

# monitor_prod shoud be run in individual directory for each year to
# allow parallel processing
chkdir $YEAR

# prepare the section.dat and dens_section.dat
  cp drakkar_sections_table.txt drakkar_trpsig_table.txt $YEAR/

# Function to create taglist for frequency of diagnostics (monthly, annual, or both)
mktaglist(){
   taglist=''
   case $1 in
      1) taglist="${taglist} y${YEAR}${xiosid}" ;;
      2) for m in $(seq 1 12); do
            mm=$( printf "%02d" $m )
            taglist="${taglist} y${YEAR}m${mm}${xiosid}"
         done ;;
      3) taglist="${taglist} y${YEAR}${xiosid}"
         for m in $(seq 1 12); do
            mm=$( printf "%02d" $m )
            taglist="${taglist} y${YEAR}m${mm}${xiosid}"
         done ;;
   esac
   echo "$taglist"
            }

# Function getsuffix returns _1m or eventually _1y or '' according to case in use. Argument is TAG
getsuffix() {
   monthly=$( echo $1 | awk '{ print index($1,"m") }' )
   if [ $monthly == 6 ] ; then
      echo '_1m'
   else
      echo '_1y'
   fi
            }

# Function to check if you are in monthly or yearly case and define corresponding DIAGS directory
#  eg : define_diags_dir ORCA2_y2000_1m_TSMEAN.nc
define_diags_dir() {
   txt=$( echo $1 | awk '{ print index($1,".txt") }' )
   if [ $txt == 0 ] ; then
       DIAGSOUT=$DIAGS/NC
   else
       DIAGSOUT=$DIAGS/TXT
   fi
                   }

# Function that transfert/concatenate cdftool file to target file
#  eg : concat_file $TAG cdftool_file  target_file
concat_file() {
   # look for month
   month=$( echo ${1%.*} | awk -Fm '{ print $2 }' )
   if [ $month ] ; then  # monthly diags
     case $month in
     01) cp $2 $3 ;;     # first month initialize output file
      *)  ncrcat -h $3 $2 -o tmp.nc  ; mv tmp.nc $3 ;;
     esac
   else                  # no month
     mv $2 $3            # just rename
   fi
              }

# Function to merge a bunch of files into a single one. All variables
# must have different names !
#  eg : merge_files  merged_file.nc   list_of_files...
merge_files () {
   if (( $# > 1 )) ; then   # performs merge only if files to merge ...
     mfile=$1 ; shift         # merge file is the first argument
     cp $1 $mfile  ; shift  # copy first file to merge file
     for f in $* ; do       # loop on files
       ncks -A -h $f $mfile # merge
     done
   fi
                }

# Function that return a list without duplicate items
#  eg : filter_list $list
filter_list() {
   for ll in $* ; do echo $ll ; done | sort -u
              } 

cd $YEAR
#------------------------------------------------------------------------------
# directory name frequently used:
#------------------------------------------------------------------------------
  # on the storage machine : path relative to the root of S-machine
  MEANY=$CONFIG/${CONFCASE}-MEAN/$XIOS/$YEAR
  SDIRY=$CONFIG/${CONFCASE}-S/$XIOS/$YEAR
  DIAGS=${CONFIG}/${CONFCASE}-DIAGS
  IDIR=$CONFIG/${CONFIG}-I

  # on the production machine
  P_CTL=$HOME/RUN_${CONFIG}/${CONFCASE}/CTL

  # check existence of some required directories
  # ... on ergon
  chkdirg $CONFIG
  chkdirg $DIAGS
  chkdirg $DIAGS/NC     # for NetCdf diag files
  chkdirg $DIAGS/TXT    # for NetCdf diag files

#------------------------------------------------------------------------------
# PATH:
#-----------------------------------------------------------------------------
  export PATH=$CDFTOOLS/:$PATH

# check if required cdftools are available, exit if missing
  err=0
  for cdfprog in cdfeke cdfmean cdfrmsssh cdfstdevw cdficediags cdftransport\
                  cdfmhst cdfhflx cdfmoc cdfmaxmoc  cdfpsi  cdfsigtrp cdfmxl \
                  cdfzonalmean cdfzonalsum cdfzonalout cdfvita cdffindij cdfprofile ; do
     if [ ! -x $CDFTOOLS/$cdfprog ] ; then
       err=$(( err + 1 ))
       echo $cdfprog executable missing. Check your $CDFTOOLS installation
     fi
  done

  if [ $err != 0 ] ; then 
     echo " monitoring cannot be performed, sorry !" ; exit 1 
  fi

#=============================================================================
#  PART I: Derived quantities, to be added to the -MEAN/YEAR directory
#=============================================================================
   # check if we have an ORCA config or otherconfig (to be improved ....) orca=0 if not
   orca=$( echo 1 | awk '{ ii=index (config,"ORCA") ; print ii  }' config=$CONFIG )

# EKE : Eddy Kinetic Energy: Input files gridU, gridV gridU2, gridV2 
#  keyword : EKE
#^^^^^^^^^^^^^^^^^^^^^^^^^^
   for TAG in $(mktaglist $EKE) ; do
   
   # retrieve U and V ANNUAL mean files and squared mean
     rapatrie  ${CONFCASE}_${TAG}_$uzotyp.nc  $MEANY ${CONFCASE}_${TAG}_$uzotyp.nc
     rapatrie  ${CONFCASE}_${TAG}_$uzotyp2.nc $MEANY ${CONFCASE}_${TAG}_$uzotyp2.nc
     rapatrie  ${CONFCASE}_${TAG}_$vmetyp.nc  $MEANY ${CONFCASE}_${TAG}_$vmetyp.nc
     rapatrie  ${CONFCASE}_${TAG}_$vmetyp2.nc $MEANY ${CONFCASE}_${TAG}_$vmetyp2.nc
   
   # retrieve a T file needed for headers only (EKE is computed on the T-point)
     rapatrie  ${CONFCASE}_${TAG}_$temtyp.nc $MEANY  ${CONFCASE}_${TAG}_$temtyp.nc

   cdfeke -u ${CONFCASE}_${TAG}_$uzotyp.nc \
     -u2 ${CONFCASE}_${TAG}_$uzotyp2.nc \
     -v  ${CONFCASE}_${TAG}_$vmetyp.nc \
     -v2 ${CONFCASE}_${TAG}_$vmetyp2.nc \
     -t ${CONFCASE}_${TAG}_$temtyp.nc $NCOPT -o ${CONFCASE}_${TAG}_EKE.nc 

   # dispose file on the MEAN directory
   expatrie ${CONFCASE}_${TAG}_EKE.nc $MEANY  ${CONFCASE}_${TAG}_EKE.nc
   \rm ${CONFCASE}_${TAG}_EKE.nc
  done 

# RMS SSH and StdDev W : Input files : gridT, gridT2  gridW, gridW2
#  keyword : RMSSSH
#^^^^^^^^^^^^^^^^^^^^^^^
  for TAG in $(mktaglist $RMSSSH) ; do
   
   # RMSSSH :get gridT gridT2
   rapatrie  ${CONFCASE}_${TAG}_$sshtyp.nc $MEANY  ${CONFCASE}_${TAG}_$sshtyp.nc
   rapatrie  ${CONFCASE}_${TAG}_$sshtyp2.nc $MEANY  ${CONFCASE}_${TAG}_$sshtyp2.nc
   cdfrmsssh  -t ${CONFCASE}_${TAG}_$sshtyp.nc -t2 ${CONFCASE}_${TAG}_$sshtyp2.nc $NCOPT \
              -o ${CONFCASE}_${TAG}_RMSSSH.nc

   # dispose file on the MEAN directory
   expatrie ${CONFCASE}_${TAG}_RMSSSH.nc  $MEANY  ${CONFCASE}_${TAG}_RMSSSH.nc
   \rm ${CONFCASE}_${TAG}_RMSSSH.nc

   # StdDev W :get gridW and gridW2 files
   rapatrie ${CONFCASE}_${TAG}_gridW.nc $MEANY ${CONFCASE}_${TAG}_gridW.nc
   rapatrie ${CONFCASE}_${TAG}_gridW2.nc $MEANY ${CONFCASE}_${TAG}_gridW2.nc

   cdfstdevw  -w ${CONFCASE}_${TAG}_gridW.nc -w2 ${CONFCASE}_${TAG}_gridW2.nc $NCOPT \
              -o ${CONFCASE}_${TAG}_STDEVW.nc

   # dispose file on the MEAN directory
   expatrie ${CONFCASE}_${TAG}_STDEVW.nc $MEANY ${CONFCASE}_${TAG}_STDEVW.nc
   \rm ${CONFCASE}_${TAG}_STDEVW.nc
  done

# Barotropic Transport: Input file: gridU, gridV mesh mask
#  keyword : BSF
#^^^^^^^^^^^^^^^^^^^^^
  for TAG in $(mktaglist $BSF) ; do 
   
   # get gridU gridV files
   rapatrie ${CONFCASE}_${TAG}_$uzotyp.nc $MEANY ${CONFCASE}_${TAG}_$uzotyp.nc
   rapatrie ${CONFCASE}_${TAG}_$vmetyp.nc $MEANY ${CONFCASE}_${TAG}_$vmetyp.nc
 
   # get mesh mask files 
   rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
   rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc  $IDIR mesh_hgr.nc
   rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc  $IDIR mesh_zgr.nc
 
   cdfpsi -u ${CONFCASE}_${TAG}_$uzotyp.nc -v ${CONFCASE}_${TAG}_$vmetyp.nc $FULLOPT $NCOPT \
          -o ${CONFCASE}_${TAG}_PSI.nc
 
   # dispose and rename on the MEAN directory
   expatrie ${CONFCASE}_${TAG}_PSI.nc  $MEANY ${CONFCASE}_${TAG}_PSI.nc
   \rm ${CONFCASE}_${TAG}_PSI.nc
  done

# MOC Meridional Overturning Circulation:  Input file: gridV, mesh mask, mask_glo
#  keyword : MOC
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
  for TAG in $(mktaglist $MOC) ; do 
   # get gridV  files
   rapatrie ${CONFCASE}_${TAG}_$vmetyp.nc $MEANY ${CONFCASE}_${TAG}_$vmetyp.nc
 
   # get mesh mask files + new_maskglo
   rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
   rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc  $IDIR mesh_hgr.nc
   rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc  $IDIR mesh_zgr.nc
   if (( $orca != 0 )) ; then rapatrie  $fbasinmask $IDIR $fbasinmask ; fi
 
   cdfmoc -v ${CONFCASE}_${TAG}_$vmetyp.nc $FULLOPT -o ${CONFCASE}_${TAG}_MOC.nc
 
   # dispose on ergon MEAN/YEAR directory
   expatrie ${CONFCASE}_${TAG}_MOC.nc $MEANY ${CONFCASE}_${TAG}_MOC.nc
   \rm ${CONFCASE}_${TAG}_MOC.nc
  done

# MOCSIG Meridional Overturning Circulation on sigma coordinates:  Input file: gridV, gridT, mesh mask, mask_glo
#  keyword : MOCSIG
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

mkmocsig(){
     # get annual mean gridV and gridT files
     rapatrie ${CONFCASE}_${TAG}_$vmetyp.nc $MEANY ${CONFCASE}_${TAG}_$vmetyp.nc
     rapatrie ${CONFCASE}_${TAG}_$temtyp.nc $MEANY ${CONFCASE}_${TAG}_$temtyp.nc
     cdfmocsig -v ${CONFCASE}_${TAG}_$vmetyp.nc -t ${CONFCASE}_${TAG}_$temtyp.nc -r $DREF $FULLOPT \
               -o ${CONFCASE}_${TAG}_MOCSIG_${NREF}.nc
     expatrie ${CONFCASE}_${TAG}_MOCSIG_${NREF}.nc $MEANY ${CONFCASE}_${TAG}_MOCSIG_${NREF}.nc
           }

mkmocsig5d(){
     # get 5-day averaged gridV and gridT files
     rapatrie_5d $vmetyp $SDIRY $TAG
     rapatrie_5d $temtyp $SDIRY $TAG
     for fileV in ${CONFCASE}_y${YEAR}m${MONTH}*d??${xiosid}_$vmetyp.nc ; do
       fileT=$( echo $fileV | sed -e "s/$vmetyp/$temtyp/"  )
       fileM=$( echo $fileV | sed -e "s/$vmetyp/MOCSIG/"  )
       cdfmocsig -v $fileV -t $fileT -r $DREF $FULLOPT -o $fileM
     done
     cdfmoy -l ${CONFCASE}_y${YEAR}m${MONTH}*d??${xiosid}_MOCSIG.nc -o  ${CONFCASE}_${TAG}_MOCSIG_5d_${NREF}
     expatrie ${CONFCASE}_${TAG}_MOCSIG_5d_${NREF}.nc $MEANY ${CONFCASE}_${TAG}_MOCSIG_5d_${NREF}.nc
             }

  for TAG in $(mktaglist $MOCSIG) ; do
   # Compute NREF
   if [ $DREF == 0    ]; then NREF=0 ; fi
   if [ $DREF == 1000 ]; then NREF=1 ; fi
   if [ $DREF == 2000 ]; then NREF=2 ; fi

   # get mesh mask files + new_maskglo
   rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
   rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc  $IDIR mesh_hgr.nc
   rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc  $IDIR mesh_zgr.nc
   if (( $orca == 0 )) ; then rapatrie  $fbasinmask $IDIR $fbasinmask ; fi

   MONTH=`echo ${TAG} | awk -Fm '{print $2}'`

   case $mocsig_5d in
     0) mkmocsig ;;
     1) mkmocsig5d ;;
     2) mkmocsig ; mkmocsig5d ;;
   esac

  done

# Mixed Layer Diagnostics : Input file : gridT, mesh_hgr, mesh_zgr
#  keyword : MXL
#^^^^^^^^^^^^^^^^^^^^^^^^

mkmxl(){
   # get mesh mask files
   rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc $IDIR mesh_hgr.nc
   rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc $IDIR mesh_zgr.nc
   listfiles=''
   for m in $*  ; do
     mm=$(printf "%02d" $m)
     f=${CONFCASE}_y${YEAR}m${mm}${xiosid}_$temtyp.nc
     g=$(echo $f | sed -e "s/$temtyp/MXL/")
     rapatrie $f $MEANY $f
     cdfmxl  -t $f $NCOPT -o $g
     # dispose on ergon, MEAN/YEAR directory
     expatrie $g $MEANY $g
     listfiles="$listfiles $g"
   done
        }

  case $MXL in
     1) taglist="3 9" ; mkmxl $taglist ;;
     2) taglist=$(seq 1 12) ; mkmxl $taglist ;;
     3) taglist=$(seq 1 12) ; mkmxl $taglist
        h=${CONFCASE}_y${YEAR}${xiosid}_MXL.nc
        cdfmoy_weighted -l $listfiles -o $h
        expatrie $h $MEANY $h ;;
  esac

# Large scale potential vorticity: input file : gridT, and mesh_mask
#  keyword : LSPV
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

mklspv(){
   # get mesh mask files
   rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
   rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc  $IDIR mesh_hgr.nc
   rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc  $IDIR mesh_zgr.nc
   listfiles=''
   for m in $* ; do
     mm=$(printf "%02d" $m)
     f=${CONFCASE}_y${YEAR}m${mm}${xiosid}_$temtyp.nc
     g=$(echo $f | sed -e "s/$temtyp/LSPV/")
     rapatrie $f $MEANY $f
     # compute LSPV
     if [ $VVL = 1 ] ; then
        w=${CONFCASE}_y${YEAR}m${mm}${xiosid}_gridW.nc
        rapatrie $w $MEANY $w
        zVVLOPT="$VVLOPT $w"
     else
        zVVLOPT=""
     fi
     cdfpvor  -t $f -lspv $NCOPT $FULLOPT -o $g $zVVLOPT
     # dispose on ergon, MEAN/YEAR directory
     expatrie $g $MEANY $g
     listfiles="$listfiles $g"
   done
         }

   case $LSPV in
     1) taglist="3 9"       ; mklspv $taglist ;;
     2) taglist=$(seq 1 12) ; mklspv $taglist ;;
     3) taglist=$(seq 1 12) ; mklspv $taglist
        h=${CONFCASE}_y${YEAR}${xiosid}_LSPV.nc
        cdfmoy_weighted -l $listfiles -o $h $NCOPT
        expatrie $h $MEANY $h ;;
   esac


#=============================================================================
#  PART II: Time series: compute some integral quantities relevant for monitor
#           the ocean variability, and the behaviour of the on going run. 
#           Output is basically a small ASCII file, from which a matlab
#           suitable input file  (.mtl) is derived.
#=============================================================================
# Global MEANS: T S SSH Input files: gridT , mesh_hgr, mesh_zgr, mask
#  keyword : TSMEAN  file_id :  TMEAN / SMEAN / SSHMEAN ==> TSMEAN
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
if [   $TSMEAN != 0 ] ; then

  mkannuallevitus(){
   if [ $(chkfile $DIAGS/NC/LEVITUS_y0000_1y_TSMEAN.nc ) == absent ] ; then
    # first time : Create header with Levitus equivalent
    # requires  LEVITUS 'same' diags (from the ANNUAL mean )
    #  !!! NEW !!!
    # get non-masked levitus then mask it with the same mask as the model
    levitus=${TSCLIM:=Levitus_p2.1}_1y_TS_$( echo $CONFIG | tr 'A-Z' 'a-z').nc
    rapatrie $levitus $IDIR $levitus
    cdfmltmask -f $levitus  -m mask.nc -v votemper,vosaline  -p T  -o ${levitus}_masked_masked    
    mv ${levitus}_masked_masked ${TSCLIM:=Levitus_p2.1}_1y_TS_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc  # simplify name
    levitus=${TSCLIM:=Levitus_p2.1}_1y_TS_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc # will be ready for GIB DIAG 
    #  
    cdfmean -f $levitus -v votemper -p T $FULLOPT  > LEVITUS_y0000_1y_TMEAN.txt 
           concat_file y0000 cdfmean.nc LEVITUS_y0000_1y_TMEAN.nc
    cdfmean -f $levitus -v vosaline -p T $FULLOPT  > LEVITUS_y0000_1y_SMEAN.txt 
           concat_file y0000 cdfmean.nc LEVITUS_y0000_1y_SMEAN.nc

    #
    define_diags_dir LEVITUS_y0000_1y_TMEAN.txt
    expatrie  LEVITUS_y0000_1y_TMEAN.txt $DIAGSOUT  LEVITUS_y0000_1y_TMEAN.txt
    expatrie  LEVITUS_y0000_1y_SMEAN.txt $DIAGSOUT  LEVITUS_y0000_1y_SMEAN.txt

    merge_files LEVITUS_y0000_1y_TSMEAN.nc LEVITUS_y0000_1y_TMEAN.nc LEVITUS_y0000_1y_SMEAN.nc
    define_diags_dir LEVITUS_y0000_1y_TSMEAN.nc
    expatrie  LEVITUS_y0000_1y_TSMEAN.nc $DIAGSOUT  LEVITUS_y0000_1y_TSMEAN.nc
   fi
                    }

  mkmonthlylevitus(){
    if [ $(chkfile $DIAGS/NC/LEVITUS_y0000_1m_TSMEAN.nc ) == absent ] ; then
      # first time : Create header with Levitus equivalent
      # requires  LEVITUS 'same' diags (from the MONTHLY mean )
      # Contrary to ANNUAL means, for MONTHLY means we must have two distinct files (T and S): file size issue
      #  !!! NEW !!!
      # get non-masked levitus then mask it with the same mask as the model
      tlevitus=${TSCLIM:=Levitus_p2.1}_1m_T_$( echo $CONFIG | tr 'A-Z' 'a-z').nc
      slevitus=${TSCLIM:=Levitus_p2.1}_1m_S_$( echo $CONFIG | tr 'A-Z' 'a-z').nc
      rapatrie $tlevitus $IDIR $tlevitus
      rapatrie $slevitus $IDIR $slevitus
      for m in $(seq 1 12 ) ; do 
         MONTH=$(printf "%02d" $m )
         tmlevitus=${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_T_$( echo $CONFIG | tr 'A-Z' 'a-z').nc
         smlevitus=${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_S_$( echo $CONFIG | tr 'A-Z' 'a-z').nc

         ncks -h -F -d time_counter,${MONTH},${MONTH} $tlevitus $tmlevitus
         ncks -h -F -d time_counter,${MONTH},${MONTH} $slevitus $smlevitus
         cdfmltmask -f $tmlevitus  -m mask.nc -v votemper -p T      # votemper --> $levitus_masked
         cdfmltmask -f $smlevitus  -m mask.nc -v vosaline -p T      # vosaline --> $levitus_masked
         mv ${tmlevitus}_masked ${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_T_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc  # simplify name
         mv ${smlevitus}_masked ${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_S_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc  # simplify name
         tmlevitus=${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_T_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc # will be ready for GIB DIAG 
         smlevitus=${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_S_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc # will be ready for GIB DIAG 
         #  
         cdfmean -f $tmlevitus -v votemper -p T $FULLOPT  >> LEVITUS_y0000_1m_TMEAN.txt 
              concat_file y0000m${MONTH} cdfmean.nc LEVITUS_y0000_1m_TMEAN.nc
         cdfmean -f $smlevitus -v vosaline -p T $FULLOPT  >> LEVITUS_y0000_1m_SMEAN.txt 
              concat_file y0000m${MONTH} cdfmean.nc LEVITUS_y0000_1m_SMEAN.nc
      done
    
      define_diags_dir LEVITUS_y0000_1m_TMEAN.txt
      expatrie  LEVITUS_y0000_1m_TMEAN.txt $DIAGSOUT  LEVITUS_y0000_1m_TMEAN.txt
      expatrie  LEVITUS_y0000_1m_SMEAN.txt $DIAGSOUT  LEVITUS_y0000_1m_SMEAN.txt

      merge_files LEVITUS_y0000_1m_TSMEAN.nc LEVITUS_y0000_1m_TMEAN.nc LEVITUS_y0000_1m_SMEAN.nc
      define_diags_dir LEVITUS_y0000_1m_TSMEAN.nc
      expatrie  LEVITUS_y0000_1m_TSMEAN.nc $DIAGSOUT  LEVITUS_y0000_1m_TSMEAN.nc
     fi
                    }

  file_lst_txt=''
  file_lst=''
  for TAG in $(mktaglist $TSMEAN) ; do
   # get mesh mask files
   rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
   rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc $IDIR mesh_hgr.nc
   rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc $IDIR mesh_zgr.nc
  
   # get gridT files
   rapatrie ${CONFCASE}_${TAG}_$temtyp.nc $MEANY ${CONFCASE}_${TAG}_$temtyp.nc
   rapatrie ${CONFCASE}_${TAG}_$sshtyp.nc $MEANY ${CONFCASE}_${TAG}_$sshtyp.nc

   # output file name ascii and nc
   suf=$( getsuffix $TAG )
   fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}
   fsshmean=${fbase}_SSHMEAN.txt  ; fsshmean_nc=${fbase}_SSHMEAN.nc
   ftmean=${fbase}_TMEAN.txt      ; ftmean_nc=${fbase}_TMEAN.nc
   fsmean=${fbase}_SMEAN.txt      ; fsmean_nc=${fbase}_SMEAN.nc

   # save file list ( to be sorted later to eliminate duplicate entries )
   file_lst_txt=$( filter_list $file_lst_txt $fsshmean $ftmean $fsmean  )
   file_lst=$( filter_list $file_lst $fsshmean_nc $ftmean_nc $fsmean_nc )

   # set header on the output file (ASCII)
   MONTH=`echo ${TAG%$xiosid} | awk -Fm '{print $2}'`
   echo $YEAR $MONTH >>  $fsshmean ; echo $YEAR $MONTH >>  $ftmean ;  echo $YEAR $MONTH >>  $fsmean

   # 3D means
   cdfmean  -f ${CONFCASE}_${TAG}_$sshtyp.nc -v sossheig -p T $FULLOPT $VVLOPT >> $fsshmean ; concat_file $TAG cdfmean.nc $fsshmean_nc
   cdfmean  -f ${CONFCASE}_${TAG}_$temtyp.nc -v votemper -p T $FULLOPT $VVLOPT >> $ftmean   ; concat_file $TAG cdfmean.nc $ftmean_nc
   cdfmean  -f ${CONFCASE}_${TAG}_$saltyp.nc -v vosaline -p T $FULLOPT $VVLOPT >> $fsmean   ; concat_file $TAG cdfmean.nc $fsmean_nc
  done

  # dispose TXT file in the ad-hoc -DIAGS/xxx directory
  for f in $file_lst_txt ; do
   define_diags_dir $f
   expatrie  $f $DIAGSOUT $f
  done

  # merge matching nc files
  for suf in _1m _1y ; do 
    fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}
    ftsmean_nc=${fbase}_TSMEAN.nc
    tmplst=''
    for f in $file_lst ; do
      tmplst="$tmplst $(echo $f | grep $fbase )"
    done
    merge_files $ftsmean_nc $tmplst 
    if [ -f $ftsmean_nc ] ; then
      define_diags_dir $ftsmean_nc
      expatrie  $ftsmean_nc $DIAGSOUT $ftsmean_nc
    fi
  done

  case $TSMEAN in
     1) mkannuallevitus  ;;
     2) mkmonthlylevitus ;;
     3) mkannuallevitus
        mkmonthlylevitus ;;
  esac
fi

# Latitude-bands MEANS: T S SSH Input files: gridT , mesh_hgr, mesh_zgr, mask
#  keyword : TSLAT  file_id :  TLAT / SLAT / SSHLAT ==> TSLAT
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

if [   $TSLAT != 0 ] ; then
  LATS=-60
  LATN=60

  mkannuallevituslat(){
   if [ $(chkfile $DIAGS/NC/LEVITUS_y0000_1y_TSLATN.nc ) == absent ] ; then
    # first time : Create header with Levitus equivalent
    # requires  LEVITUS 'same' diags (from the ANNUAL mean )
    #  !!! NEW !!!
    # get non-masked levitus then mask it with the same mask as the model
    levitus=${TSCLIM:=Levitus_p2.1}_1y_TS_$( echo $CONFIG | tr 'A-Z' 'a-z').nc
    rapatrie $levitus $IDIR $levitus
    cdfmltmask -f $levitus  -m mask.nc -v votemper,vosaline -p T -o ${levitus}_masked_masked  
    mv ${levitus}_masked_masked ${TSCLIM:=Levitus_p2.1}_1y_TS_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc  # simplify name
    levitus=${TSCLIM:=Levitus_p2.1}_1y_TS_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc # will be ready for GIB DIAG 
    #  
    cdfmean -f $levitus -v votemper -v -p T -w 0 0 $JN1 $JMAX 0 0 $FULLOPT  ; concat_file y0000 cdfmean.nc LEVITUS_y0000_1y_TLATN.nc
    cdfmean -f $levitus -v votemper -v -p T -w 0 0 $JS0 $JN0 0 0  $FULLOPT  ; concat_file y0000 cdfmean.nc LEVITUS_y0000_1y_TLATEQ.nc
    cdfmean -f $levitus -v votemper -v -p T -w 0 0 1 $JS1 0 0     $FULLOPT  ; concat_file y0000 cdfmean.nc LEVITUS_y0000_1y_TLATS.nc
    cdfmean -f $levitus -v vosaline -v -p T -w 0 0 $JN1 $JMAX 0 0 $FULLOPT  ; concat_file y0000 cdfmean.nc LEVITUS_y0000_1y_SLATN.nc
    cdfmean -f $levitus -v vosaline -v -p T -w 0 0 $JS0 $JN0 0 0  $FULLOPT  ; concat_file y0000 cdfmean.nc LEVITUS_y0000_1y_SLATEQ.nc
    cdfmean -f $levitus -v vosaline -v -p T -w 0 0 1 $JS1 0 0     $FULLOPT  ; concat_file y0000 cdfmean.nc LEVITUS_y0000_1y_SLATS.nc

    merge_files LEVITUS_y0000_1y_TSLATN.nc LEVITUS_y0000_1y_TLATN.nc LEVITUS_y0000_1y_SLATN.nc
    define_diags_dir LEVITUS_y0000_1y_TSLATN.nc
    expatrie  LEVITUS_y0000_1y_TSLATN.nc $DIAGSOUT  LEVITUS_y0000_1y_TSLATN.nc
    merge_files LEVITUS_y0000_1y_TSLATEQ.nc LEVITUS_y0000_1y_TLATEQ.nc LEVITUS_y0000_1y_SLATEQ.nc
    define_diags_dir LEVITUS_y0000_1y_TSLATEQ.nc
    expatrie  LEVITUS_y0000_1y_TSLATEQ.nc $DIAGSOUT  LEVITUS_y0000_1y_TSLATEQ.nc
    merge_files LEVITUS_y0000_1y_TSLATS.nc LEVITUS_y0000_1y_TLATS.nc LEVITUS_y0000_1y_SLATS.nc
    define_diags_dir LEVITUS_y0000_1y_TSLATS.nc
    expatrie  LEVITUS_y0000_1y_TSLATS.nc $DIAGSOUT  LEVITUS_y0000_1y_TSLATS.nc
   fi
                    }

  mkmonthlylevituslat(){
    if [ $(chkfile $DIAGS/NC/LEVITUS_y0000_1m_TSLATN.nc ) == absent ] ; then
      # first time : Create header with Levitus equivalent
      # requires  LEVITUS 'same' diags (from the MONTHLY mean )
      # Contrary to ANNUAL means, for MONTHLY means we must have two distinct files (T and S): file size issue
      #  !!! NEW !!!
      # get non-masked levitus then mask it with the same mask as the model
      tlevitus=${TSCLIM:=Levitus_p2.1}_1m_T_$( echo $CONFIG | tr 'A-Z' 'a-z').nc
      slevitus=${TSCLIM:=Levitus_p2.1}_1m_S_$( echo $CONFIG | tr 'A-Z' 'a-z').nc
      rapatrie $tlevitus $IDIR $tlevitus
      rapatrie $slevitus $IDIR $slevitus
      for m in $(seq 1 12 ) ; do
         MONTH=$(printf "%02d" $m )
         tmlevitus=${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_T_$( echo $CONFIG | tr 'A-Z' 'a-z').nc
         smlevitus=${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_S_$( echo $CONFIG | tr 'A-Z' 'a-z').nc

         ncks -h -F -d time_counter,${MONTH},${MONTH} $tlevitus $tmlevitus
         ncks -h -F -d time_counter,${MONTH},${MONTH} $slevitus $smlevitus
         cdfmltmask -f $tmlevitus  -m mask.nc -v votemper -p T   # votemper --> $levitus_masked
         cdfmltmask -f $smlevitus  -m mask.nc -v vosaline -p T   # vosaline --> $levitus_masked
         mv ${tmlevitus}_masked ${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_T_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc  # simplify name
         mv ${smlevitus}_masked ${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_S_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc  # simplify name
         tmlevitus=${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_T_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc # will be ready for GIB DIAG 
         smlevitus=${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_S_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc # will be ready for GIB DIAG 
         #  
         cdfmean -f $tmlevitus -v votemper -p T -w 0 0 $JN1 $JMAX 0 0 $FULLOPT 
             concat_file y0000m${MONTH} cdfmean.nc LEVITUS_y0000_1m_TLATN.nc
         cdfmean -f $tmlevitus -v votemper -p T -w 0 0 $JS0 $JN0 0 0  $FULLOPT 
             concat_file y0000m${MONTH} cdfmean.nc LEVITUS_y0000_1m_TLATEQ.nc
         cdfmean -f $tmlevitus -v votemper -p T -w 0 0 1 $JS1 0 0     $FULLOPT
             concat_file y0000m${MONTH} cdfmean.nc LEVITUS_y0000_1m_TLATS.nc
         cdfmean -f $smlevitus -v vosaline -p T -w 0 0 $JN1 $JMAX 0 0 $FULLOPT
             concat_file y0000m${MONTH} cdfmean.nc LEVITUS_y0000_1m_SLATN.nc
         cdfmean -f $smlevitus -v vosaline -p T -w 0 0 $JS0 $JN0 0 0  $FULLOPT
             concat_file y0000m${MONTH} cdfmean.nc LEVITUS_y0000_1m_SLATEQ.nc
         cdfmean -f $smlevitus -v vosaline -p T -w 0 0 1 $JS1 0 0     $FULLOPT
             concat_file y0000m${MONTH} cdfmean.nc LEVITUS_y0000_1m_SLATS.nc
      done

      merge_files LEVITUS_y0000_1m_TSLATN.nc LEVITUS_y0000_1m_TLATN.nc LEVITUS_y0000_1m_SLATN.nc
      define_diags_dir LEVITUS_y0000_1m_TSLATN.nc
      expatrie  LEVITUS_y0000_1m_TSLATN.nc $DIAGSOUT  LEVITUS_y0000_1m_TSLATN.nc
      merge_files LEVITUS_y0000_1m_TSLATEQ.nc LEVITUS_y0000_1m_TLATEQ.nc LEVITUS_y0000_1m_SLATEQ.nc
      define_diags_dir LEVITUS_y0000_1m_TSLATEQ.nc
      expatrie  LEVITUS_y0000_1m_TSLATEQ.nc $DIAGSOUT  LEVITUS_y0000_1m_TSLATEQ.nc
      merge_files LEVITUS_y0000_1m_TSLATS.nc LEVITUS_y0000_1m_TLATS.nc LEVITUS_y0000_1m_SLATS.nc
      define_diags_dir LEVITUS_y0000_1m_TSLATS.nc
      expatrie  LEVITUS_y0000_1m_TSLATS.nc $DIAGSOUT  LEVITUS_y0000_1m_TSLATS.nc
     fi
                    }

   # get mesh mask files
   rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
   rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc $IDIR mesh_hgr.nc
   rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc $IDIR mesh_zgr.nc

  # JN1
  # --- LATN=60 (60N)
  # JN0
  #
  #
  #
  # JS0
  # --- LATS=-60 (60S)
  # JS1

  # Find JN0 JN1 as J-index around latitude LATN
  tmp=`cdffindij -w 0 0 $LATN $LATN -p T -c mesh_hgr.nc | tail -1 | awk '{print $3}'`
  result=$(echo "$tmp $LATN" | awk '{print $1 - $2}' );
  if [[ $result > 0 ]] ; then
   JN1=`cdffindij -w 0 0 $LATN $LATN -p T -c mesh_hgr.nc | tail -2 | head -1 | awk '{print $3}'`
   JN0=$((JN1-1))
  else
   JN0=`cdffindij -w 0 0 $LATN $LATN -p T -c mesh_hgr.nc | tail -2 | head -1 | awk '{print $3}'`
   JN1=$((JN0+1))
  fi
  # Same fpr JS0 JS1, with LATS
  tmp=`cdffindij -w 0 0 $LATS $LATS -p T -c mesh_hgr.nc | tail -1 | awk '{print $3}'`
  result=$(echo "$tmp $LATS" | awk '{print $1 - $2}' );
  if [[ $result > 0 ]] ; then
   JS0=`cdffindij -w 0 0 $LATS $LATS -p T -c mesh_hgr.nc | tail -2 | head -1 | awk '{print $3}'`
   JS1=$((JS0-1))
  else
   JS1=`cdffindij -w 0 0 $LATS $LATS -p T -c mesh_hgr.nc | tail -2 | head -1 | awk '{print $3}'`
   JS0=$((JS1+1))
  fi
  JMAX=`cdfinfo -f mesh_hgr.nc | grep npjglo | awk '{print $3}'`

  file_lstn=''
  file_lsteq=''
  file_lsts=''
  for TAG in $(mktaglist $TSLAT) ; do

   # get gridT files
   rapatrie ${CONFCASE}_${TAG}_$temtyp.nc $MEANY ${CONFCASE}_${TAG}_$temtyp.nc
   rapatrie ${CONFCASE}_${TAG}_$sshtyp.nc $MEANY ${CONFCASE}_${TAG}_$sshtyp.nc

   # output file name ascii and nc
   suf=$( getsuffix $TAG )
   fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}
   fsshlatn_nc=${fbase}_SSHLATN.nc
   fsshlateq_nc=${fbase}_SSHLATEQ.nc
   fsshlats_nc=${fbase}_SSHLATS.nc
   ftlatn_nc=${fbase}_TLATN.nc
   ftlateq_nc=${fbase}_TLATEQ.nc
   ftlats_nc=${fbase}_TLATS.nc
   fslatn_nc=${fbase}_SLATN.nc
   fslateq_nc=${fbase}_SLATEQ.nc
   fslats_nc=${fbase}_SLATS.nc

   # save file list ( to be sorted later to eliminate duplicate entries )
   file_lstn=$( filter_list $file_lstn $fsshlatn_nc $ftlatn_nc $fslatn_nc )
   file_lsteq=$( filter_list $file_lsteq $fsshlateq_nc $ftlateq_nc $fslateq_nc )
   file_lsts=$( filter_list $file_lsts $fsshlats_nc $ftlats_nc $fslats_nc )

   # 3D Latitude-bands means
   cdfmean -f ${CONFCASE}_${TAG}_$sshtyp.nc -v sossheig -p T -w 0 0 $JN1 $JMAX 0 0  $FULLOPT $VVLOPT
        concat_file $TAG cdfmean.nc $fsshlatn_nc
   cdfmean -f ${CONFCASE}_${TAG}_$sshtyp.nc -v sossheig -p T -w 0 0 $JS0 $JN0 0 0 $FULLOPT $VVLOPT
        concat_file $TAG cdfmean.nc $fsshlateq_nc
   cdfmean -f ${CONFCASE}_${TAG}_$sshtyp.nc -v sossheig -p T -w 0 0 1 $JS1 0 0  $FULLOPT $VVLOPT
        concat_file $TAG cdfmean.nc $fsshlats_nc
   cdfmean -f ${CONFCASE}_${TAG}_$temtyp.nc -v votemper -p T -w 0 0 $JN1 $JMAX 0 0  $FULLOPT $VVLOPT
        concat_file $TAG cdfmean.nc $ftlatn_nc
   cdfmean -f ${CONFCASE}_${TAG}_$temtyp.nc -v votemper -p T -w 0 0 $JS0 $JN0 0 0 $FULLOPT $VVLOPT
        concat_file $TAG cdfmean.nc $ftlateq_nc
   cdfmean -f ${CONFCASE}_${TAG}_$temtyp.nc -v votemper -p T -w 0 0 1 $JS1 0 0  $FULLOPT $VVLOPT
        concat_file $TAG cdfmean.nc $ftlats_nc
   cdfmean -f ${CONFCASE}_${TAG}_$saltyp.nc -v vosaline -p T -w 0 0 $JN1 $JMAX 0 0  $FULLOPT $VVLOPT
        concat_file $TAG cdfmean.nc $fslatn_nc
   cdfmean -f ${CONFCASE}_${TAG}_$saltyp.nc -v vosaline -p T -w 0 0 $JS0 $JN0 0 0 $FULLOPT $VVLOPT
        concat_file $TAG cdfmean.nc $fslateq_nc
   cdfmean -f ${CONFCASE}_${TAG}_$saltyp.nc -v vosaline -p T -w 0 0 1 $JS1 0 0  $FULLOPT $VVLOPT
        concat_file $TAG cdfmean.nc $fslats_nc
  done

  # merge matching nc files
  for suf in _1m _1y ; do
    fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}
    ftslatn_nc=${fbase}_TSLATN.nc
    ftslateq_nc=${fbase}_TSLATEQ.nc
    ftslats_nc=${fbase}_TSLATS.nc
    tmplstn=''
    tmplsteq=''
    tmplsts=''
    for f in $file_lstn ; do
      tmplstn="$tmplstn $(echo $f | grep $fbase )"
    done
    for f in $file_lsteq ; do
      tmplsteq="$tmplsteq $(echo $f | grep $fbase )"
    done
    for f in $file_lsts ; do
      tmplsts="$tmplsts $(echo $f | grep $fbase )"
    done
    merge_files $ftslatn_nc $tmplstn
    merge_files $ftslateq_nc $tmplsteq
    merge_files $ftslats_nc $tmplsts
    if [ -f $ftslatn_nc ] ; then
      define_diags_dir $ftslatn_nc
      expatrie  $ftslatn_nc $DIAGSOUT $ftslatn_nc
    fi
    if [ -f $ftslateq_nc ] ; then
      define_diags_dir $ftslateq_nc
      expatrie  $ftslateq_nc $DIAGSOUT $ftslateq_nc
    fi
    if [ -f $ftslats_nc ] ; then
      define_diags_dir $ftslats_nc
      expatrie  $ftslats_nc $DIAGSOUT $ftslats_nc
    fi
  done

  case $TSLAT in
     1) mkannuallevituslat  ;;
     2) mkmonthlylevituslat ;;
     3) mkannuallevituslat
        mkmonthlylevituslat ;;
  esac

fi

# Vertical T-S profiles off the coast of Portugal for Gib monitoring: input file: gridT, mesh_mask
#  keyword : GIB       file_id :  TGIB / SGIB
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
if [        $GIB  !=  0    ] ; then
  mkannuallevitusgib(){
   if [ $(chkfile $DIAGS/NC/LEVITUS_y0000_1y_TSGIB.nc ) == absent ] ; then
    # first time : Create header with Levitus equivalent
    # requires  LEVITUS 'same' diags (from the ANNUAL mean )
    levitus=${TSCLIM:=Levitus_p2.1}_1y_TS_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc
    if [ ! -f $levitus ] ; then
     # need to build a masked LEvitus with proper mask
     levitus=${TSCLIM:=Levitus_p2.1}_1y_TS_$( echo $CONFIG | tr 'A-Z' 'a-z').nc
     rapatrie $levitus $IDIR $levitus
     cdfmltmask -f $levitus  -m mask.nc -v votemper,vosaline  -p T -o ${levitus}_masked_masked
     mv ${levitus}_masked_masked ${TSCLIM:=Levitus_p2.1}_1y_TS_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc  # simplify name
     levitus=${TSCLIM:=Levitus_p2.1}_1y_TS_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc # will be ready for GIB DIAG
    fi
    #
    cdfmean -f $levitus  -v votemper -p T -w $GIBWIN  0 0 $FULLOPT  > LEVITUS_y0000_1y_TGIB.txt 
         concat_file y0000 cdfmean.nc LEVITUS_y0000_1y_TGIB.nc
    cdfmean -f $levitus  -v vosaline -p T -w $GIBWIN  0 0 $FULLOPT  > LEVITUS_y0000_1y_SGIB.txt 
         concat_file y0000 cdfmean.nc LEVITUS_y0000_1y_SGIB.nc

    define_diags_dir LEVITUS_y0000_1y_TGIB.txt
    expatrie  LEVITUS_y0000_1y_TGIB.txt $DIAGSOUT  LEVITUS_y0000_1y_TGIB.txt
    expatrie  LEVITUS_y0000_1y_SGIB.txt $DIAGSOUT  LEVITUS_y0000_1y_SGIB.txt

    merge_files LEVITUS_y0000_1y_TSGIB.nc LEVITUS_y0000_1y_TGIB.nc LEVITUS_y0000_1y_SGIB.nc
    define_diags_dir LEVITUS_y0000_1y_TSGIB.nc
    expatrie  LEVITUS_y0000_1y_TSGIB.nc $DIAGSOUT  LEVITUS_y0000_1y_TSGIB.nc
   fi
                      }

  mkmonthlylevitusgib(){
    if [ $(chkfile $DIAGS/NC/LEVITUS_y0000_1m_TSGIB.nc ) == absent ] ; then
      # first time : Create header with Levitus equivalent
      # requires  LEVITUS 'same' diags (from the MONTHLY mean )
      for m in $(seq 1 12 ) ; do
         MONTH=$(printf "%02d" $m )
         tmlevitus=${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_T_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc  
         smlevitus=${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_S_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc 
         if [ ! -f $tmlevitus -o ! -f $smlevitus ] ; then
           tlevitus=${TSCLIM:=Levitus_p2.1}_1m_T_$( echo $CONFIG | tr 'A-Z' 'a-z').nc
           slevitus=${TSCLIM:=Levitus_p2.1}_1m_S_$( echo $CONFIG | tr 'A-Z' 'a-z').nc
           rapatrie $tlevitus $IDIR $tlevitus
           rapatrie $slevitus $IDIR $slevitus
      
           tmlevitus=${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_T_$( echo $CONFIG | tr 'A-Z' 'a-z').nc
           smlevitus=${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_S_$( echo $CONFIG | tr 'A-Z' 'a-z').nc
           ncks -h -F -d time_counter,${MONTH},${MONTH} $tlevitus $tmlevitus
           ncks -h -F -d time_counter,${MONTH},${MONTH} $slevitus $smlevitus
           cdfmltmask -f $tmlevitus  -m mask.nc -v votemper -p T      # votemper --> $levitus_masked
           cdfmltmask -f $smlevitus  -m mask.nc -v vosaline -p T      # vosaline --> $levitus_masked
           mv ${tmlevitus}_masked ${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_T_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc  # simplify name
           mv ${smlevitus}_masked ${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_S_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc  # simplify name
           tmlevitus=${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_T_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc # will be ready for GIB DIAG 
           smlevitus=${TSCLIM:=Levitus_p2.1}_1m_${MONTH}_S_masked_$( echo $CONFIG | tr 'A-Z' 'a-z').nc # will be ready for GIB DIAG 
         fi  
         #
         cdfmean -f $tmlevitus -v votemper -p T -w $GIBWIN 0 0 $FULLOPT  >> LEVITUS_y0000_1m_TGIB.txt 
               concat_file y0000m${MONTH} cdfmean.nc LEVITUS_y0000_1m_TGIB.nc
         cdfmean -f $smlevitus -v vosaline -p T -w $GIBWIN 0 0 $FULLOPT  >> LEVITUS_y0000_1m_SGIB.txt 
               concat_file y0000m${MONTH} cdfmean.nc LEVITUS_y0000_1m_SGIB.nc
      done

      define_diags_dir LEVITUS_y0000_1m_TGIB.txt
      expatrie  LEVITUS_y0000_1m_TGIB.txt $DIAGSOUT  LEVITUS_y0000_1m_TGIB.txt
      expatrie  LEVITUS_y0000_1m_SGIB.txt $DIAGSOUT  LEVITUS_y0000_1m_SGIB.txt

      merge_files LEVITUS_y0000_1m_TSGIB.nc LEVITUS_y0000_1m_TGIB.nc LEVITUS_y0000_1m_SGIB.nc
      define_diags_dir LEVITUS_y0000_1m_TSGIB.nc
      expatrie  LEVITUS_y0000_1m_TSGIB.nc $DIAGSOUT  LEVITUS_y0000_1m_TSGIB.nc
    fi
                    }

  file_lst_txt=''
  file_lst=''
  for TAG in $(mktaglist $GIB) ; do
   # get gridT file
   rapatrie ${CONFCASE}_${TAG}_$temtyp.nc $MEANY ${CONFCASE}_${TAG}_$temtyp.nc
   rapatrie ${CONFCASE}_${TAG}_$saltyp.nc $MEANY ${CONFCASE}_${TAG}_$saltyp.nc
   rapatrie ${CONFCASE}_${TAG}_$sshtyp.nc $MEANY ${CONFCASE}_${TAG}_$sshtyp.nc
 
   # get mesh mask files
   rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
   rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc $IDIR mesh_hgr.nc
   rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc $IDIR mesh_zgr.nc
   #
   suf=$( getsuffix $TAG )
   fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}
   
   #  output files:
   ftgib=${fbase}_TGIB.txt
   fsgib=${fbase}_SGIB.txt
   # 
   ftgib_nc=${fbase}_TGIB.nc
   fsgib_nc=${fbase}_SGIB.nc

   # save file list ( to be sorted later to eliminate duplicate entries )
   file_lst_txt=$( filter_list $file_lst_txt $ftgib             )
   file_lst=$( filter_list $file_lst $fsgib $ftgib_nc $fsgib_nc )

   MONTH=`echo ${TAG} | awk -Fm '{print $2}'`
   echo $YEAR $MONTH >> $ftgib ;  echo $YEAR $MONTH >> $fsgib

   cdfmean -f ${CONFCASE}_${TAG}_$temtyp.nc -v votemper -p T -w $GIBWIN 0 0 $FULLOPT $VVLOPT >> $ftgib 
        concat_file ${TAG} cdfmean.nc $ftgib_nc
   cdfmean -f ${CONFCASE}_${TAG}_$saltyp.nc -v vosaline -p T -w $GIBWIN 0 0 $FULLOPT $VVLOPT >> $fsgib 
        concat_file ${TAG} cdfmean.nc $fsgib_nc
  done

  # dispose TXT file in the ad-hoc -DIAGS/xxx directory
  for f in $file_lst_txt ; do
   define_diags_dir $f
   expatrie $f $DIAGSOUT $f
  done

  # merge matching nc files
  for suf in _1m _1y ; do
    fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}
    ftsgib_nc=${fbase}_TSGIB.nc
    tmplst=''
    for f in $file_lst ; do
      tmplst="$tmplst $(echo $f | grep $fbase | grep nc )"
    done
    merge_files $ftsgib_nc $tmplst
    if [ -f $ftsgib_nc ] ; then
      define_diags_dir $ftsgib_nc
      expatrie  $ftsgib_nc $DIAGSOUT $ftsgib_nc
    fi
  done

  # compute and dispose climatological equivalent, if necessary
  case $GIB in
    1) mkannuallevitusgib ;;
    2) mkmonthlylevitusgib ;;
    3) mkannuallevitusgib
       mkmonthlylevitusgib ;;
  esac
fi

# KERG dynamical diagnostics : temperature, salinity and density surface and profile, ice concentration and thickness, various mxl depths and solar radiation, input files : gridT icemod and MXL, mesh masks
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^

if [        $KERG  !=  0    ] ; then
  file_lst=''

  for TAG in $(mktaglist $KERG) ; do
   # get gridT file
   rapatrie ${CONFCASE}_${TAG}_gridT.nc $MEANY ${CONFCASE}_${TAG}_gridT.nc
   rapatrie ${CONFCASE}_${TAG}_$icemod.nc $MEANY ${CONFCASE}_${TAG}_$icemod.nc
   rapatrie ${CONFCASE}_${TAG}_MXL.nc $MEANY ${CONFCASE}_${TAG}_MXL.nc

   # get mesh mask files
   rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
   rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc $IDIR mesh_hgr.nc
   rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc $IDIR mesh_zgr.nc

   #
   suf=$( getsuffix $TAG )
   fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}

   for k in $(seq 1 6); do

   case $k in
     1) KERGWIN=$KERGWIN1 ;;
     2) KERGWIN=$KERGWIN2 ;;
     3) KERGWIN=$KERGWIN3 ;;
     4) KERGWIN=$KERGBOX1 ;;
     5) KERGWIN=$KERGBOX2 ;;
     6) KERGWIN=$KERGBOX3 ;;
   esac

   for var in votemper vosaline $ileadfra iicethic somxl010 somxl030 somxlt02 soshfldo vosigma0; do

     case $var in
       votemper|vosaline) file=${CONFCASE}_${TAG}_$temtyp.nc;;
       soshfldo) file=${CONFCASE}_${TAG}_$flxtyp.nc;;
       $ileadfra|$iicethic) file=${CONFCASE}_${TAG}_$icemod.nc;;
       somxl010|somxl030|somxlt02) file=${CONFCASE}_${TAG}_MXL.nc;;
       vosigma0) cdfsig0 -t ${CONFCASE}_${TAG}_$temtyp.nc
                 file=sig0.nc;;
     esac

     fkerg_nc=${fbase}_${var}_KERG$k.nc
     file_lst="$file_lst $fkerg_nc"

     MONTH=`echo ${TAG} | awk -Fm '{print $2}'`

   case $k in
     1|2|3)
     rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
     rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc $IDIR mesh_hgr.nc
     rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc $IDIR mesh_zgr.nc
     cdfmean -f ${file} -v ${var} -p T -w $KERGWIN 0 0 $FULLOPT $VVLOPT
     ncrename -h -v mean_${var},mean_${var}_KERG$k cdfmean.nc
     ncrename -h -v mean_3D${var},mean_3D${var}_KERG$k cdfmean.nc
     concat_file ${TAG} cdfmean.nc $fkerg_nc;;

     4|5|6)

     case $CONFIG in

       'ORCA05'|'PERIANT05'|'BIOPERIANT05')
         rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
         rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc $IDIR mesh_hgr.nc
         rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc $IDIR mesh_zgr.nc

         latwin=$( echo $KERGWIN | awk  '{ print $3 }' )
         latwin1=`expr $latwin - 1`
         latwin=$( echo $KERGWIN | awk  '{ print $4 }' )
         latwin2=`expr $latwin - 1`

         cdfclip -f mask.nc -zoom $KERGWIN
         mv cdfclip.nc mask.nc
         ncks -O -a -d x,2,721 mesh_hgr.nc mesh_hgrz.nc
         ncks -O -a -d x,612,93 -d y,$latwin1,$latwin2 mesh_hgrz.nc mesh_hgr.nc
         ncks -O -a -d x,2,721 mesh_zgr.nc mesh_zgrz.nc
         ncks -O -a -d x,612,93 -d y,$latwin1,$latwin2 mesh_zgrz.nc mesh_zgr.nc

         cdfclip -f ${file} -zoom $KERGWIN
         filez=${CONFCASE}_${TAG}_tmpZ.nc
         mv cdfclip.nc $filez

         cdfmean -f $filez -v $var -p T $FULLOPT $VVLOPT
         ncrename -h -v mean_$var,mean_${var}_KERG$k cdfmean.nc
         ncrename -h -v mean_3D$var,mean_3D${var}_KERG$k cdfmean.nc
         concat_file ${TAG} cdfmean.nc $fkerg_nc;;

       'SINDIAN05'|'BIOSINDIAN05')
         rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
         rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc $IDIR mesh_hgr.nc
         rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc $IDIR mesh_zgr.nc

         cdfmean -f ${file} -v $var -p T -w $KERGWIN 0 0 $FULLOPT
         ncrename -h -v mean_${var},mean_${var}_KERG$k cdfmean.nc
         ncrename -h -v mean_3D${var},mean_3D${var}_KERG$k cdfmean.nc
         concat_file ${TAG} cdfmean.nc $fkerg_nc;;

   esac


  esac
  done
done

  for suf in _1m _1y ; do
    fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}
    fkerg_nc=${fbase}_KERG.nc
    tmplst=''
    for f in $file_lst ; do
      tmplst="$tmplst $(echo $f | grep $fbase )"
    done
    merge_files $fkerg_nc $tmplst
    if [ -f $fkerg_nc ] ; then
      define_diags_dir $fkerg_nc
      expatrie  $fkerg_nc $DIAGSOUT $fkerg_nc
    fi
  done
 done
fi

# KERG biogeochemical diagnostics : nutrients, chlorophyll and pp profiles and co2 fluxes, input files : ptrcT diadT, mesh masks
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
 
if [        $KERGb  !=  0    ] ; then
  file_lst=''
  for TAG in $(mktaglist $KERG) ; do
   # get gridT file
   rapatrie ${CONFCASE}_${TAG}_ptrcT.nc $MEANY ${CONFCASE}_${TAG}_ptrcT.nc
   rapatrie ${CONFCASE}_${TAG}_diadT.nc $MEANY ${CONFCASE}_${TAG}_diadT.nc

   # get mesh mask files
   rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
   rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc $IDIR mesh_hgr.nc
   rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc $IDIR mesh_zgr.nc

   #
   suf=$( getsuffix $TAG )
   fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}

   for k in $(seq 1 6); do

   case $k in
     1) KERGWIN=$KERGWIN1 ;;
     2) KERGWIN=$KERGWIN2 ;;
     3) KERGWIN=$KERGWIN3 ;;
     4) KERGWIN=$KERGBOX1 ;;
     5) KERGWIN=$KERGBOX2 ;;
     6) KERGWIN=$KERGBOX3 ;;
   esac

   for var in NO3 DCHL NCHL Fer Si PO4 PPPHY PPPHY2 Delc; do

      case $var in
        NO3|DCHL|NCHL|Fer|Si|PO4) file=${CONFCASE}_${TAG}_ptrcT.nc;;
        PPPHY|PPPHY2|Delc)        file=${CONFCASE}_${TAG}_diadT.nc;;
      esac

      fkerg_nc=${fbase}_${var}_KERG$k.nc
      file_lst="$file_lst $fkerg_nc"

      MONTH=`echo ${TAG} | awk -Fm '{print $2}'`

      case $k in
        1|2|3)
        rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
        rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc $IDIR mesh_hgr.nc
        rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc $IDIR mesh_zgr.nc
        cdfmean -f ${file} -v $var -p T -w $KERGWIN 0 0 $FULLOPT $VVLOPT
        ncrename -h -v mean_$var,mean_${var}_KERG$k cdfmean.nc
        ncrename -h -v mean_3D$var,mean_3D${var}_KERG$k cdfmean.nc
        concat_file ${TAG} cdfmean.nc $fkerg_nc ;;

        4|5|6)

        case $CONFIG in

          'ORCA05'|'PERIANT05'|'BIOPERIANT05')
           rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
           rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc $IDIR mesh_hgr.nc
           rapatrie  ${MESH_MASK_ID}__mesh_zgr.nc $IDIR mesh_zgr.nc

           latwin=$( echo $KERGWIN | awk  '{ print $3 }' )
           latwin1=`expr $latwin - 1`
           latwin=$( echo $KERGWIN | awk  '{ print $4 }' )
           latwin2=`expr $latwin - 1`
           cdfclip -f mask.nc -zoom $KERGWIN
           mv cdfclip.nc mask.nc
           ncks -O -a -d x,2,721 mesh_hgr.nc mesh_hgrz.nc
           ncks -O -a -d x,612,93 -d y,$latwin1,$latwin2 mesh_hgrz.nc mesh_hgr.nc
           ncks -O -a -d x,2,721 mesh_zgr.nc mesh_zgrz.nc
           ncks -O -a -d x,612,93 -d y,$latwin1,$latwin2 mesh_zgrz.nc mesh_zgr.nc

           cdfclip -f ${file} -zoom $KERGWIN
           filez=${CONFCASE}_${TAG}_tmpZ.nc
           mv cdfclip.nc $filez

           cdfmean -f $filez -v $var -p T $FULLOPT $VVLOPT
           ncrename -h -v mean_$var,mean_${var}_KERG$k cdfmean.nc
           ncrename -h -v mean_3D$var,mean_3D${var}_KERG$k cdfmean.nc
           concat_file ${TAG} cdfmean.nc $fkerg_nc;;

          'SINDIAN05'|'BIOSINDIAN05')
           rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
           rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc $IDIR mesh_hgr.nc
           rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc $IDIR mesh_zgr.nc

           cdfmean -f ${file} -v $var -p T -w $KERGWIN 0 0 $FULLOPT $VVLOPT
           ncrename -h -v mean_${var},mean_${var}_KERG$k cdfmean.nc
           ncrename -h -v mean_3D${var},mean_3D${var}_KERG$k cdfmean.nc
           concat_file ${TAG} cdfmean.nc $fkerg_nc;;
       esac
     esac
   done
   done

  for suf in _1m _1y ; do
    fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}
    fkerg_nc=${fbase}_KERGb.nc
    tmplst=''
    for f in $file_lst ; do
      tmplst="$tmplst $(echo $f | grep $fbase )"
    done
    merge_files $fkerg_nc $tmplst
    if [ -f $fkerg_nc ] ; then
      define_diags_dir $fkerg_nc
      expatrie  $fkerg_nc $DIAGSOUT $fkerg_nc
    fi
  done
 done
fi

 
# Ice Volume area and extent for all months: input file : icemod, and mesh_mask
#  keyword : ICEMONTH file_id :  icemonth
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
if [    $ICEMONTH != 0    ] ; then
   TAG=y${YEAR}
   # get icemod files
   file_lst=''
   for m in $(seq 1 12) ; do
    mm=$( printf "%02d" $m )
    rapatrie  ${CONFCASE}_${TAG}m${mm}${xiosid}_$icemod.nc $MEANY ${CONFCASE}_${TAG}m${mm}${xiosid}_$icemod.nc
   done
 
   # get mesh mask files
   rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
   rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc  $IDIR mesh_hgr.nc
   rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc  $IDIR mesh_zgr.nc
 
   # output files:
   fbase=${CONFCASE}_${TAG}${xiosid}_1m
   fice=${fbase}_icemonth.txt
   fice_nc=${fbase}_ICEMONTH.nc

   if [ $LIM3 = 1 ] ; then 
     LIM3opt='-lim3'
   elif [ $LIM3 = 2 ] ; then 
     LIM3opt='-lim3'
   else
     LIM3opt=''
   fi

   for m in $(seq 1 12) ; do 
    mm=$( printf "%02d" $m )

    case $mm in 
    01) echo '###' $YEAR $mm > $fice ;;
    *)  echo '###' $YEAR $mm >> $fice ;;
    esac

    cdficediags -i ${CONFCASE}_${TAG}m${mm}${xiosid}_$icemod.nc $LIM3opt >> $fice 
    concat_file ${TAG}m${mm}${xiosid} icediags.nc $fice_nc

   done
 
   expatrie $fice_nc $DIAGS/NC  $fice_nc
 
fi

# El nino indexes : Input files : monthly gridT,  mesh mask
#  keyword : ELNINO  file_id: NINO12 / NINO3 / NINO4 / NINO34
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
if [    $ELNINO != 0    ] ; then  # always monthly diags
   TAG=y${YEAR}
   # get mesh mask files
   rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
   rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc $IDIR mesh_hgr.nc
   rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc $IDIR mesh_zgr.nc
 
   # outputfile
   fbase=${CONFCASE}_${TAG}${xiosid}_1m
   fnino=${fbase}_NINO.txt

   fnino12_nc=${fbase}_NINO12.nc
   fnino3_nc=${fbase}_NINO3.nc
   fnino4_nc=${fbase}_NINO4.nc
   fnino34_nc=${fbase}_NINO34.nc
   fnino_nc=${fbase}_NINO.nc   # merged file

   # get monthly mean gridT files and compute mean SST on each NINO box
   \rm $fnino
   for m in $(seq 1 12) ; do
     mm=$(printf "%02d" $m)
     f=${CONFCASE}_${TAG}m${mm}${xiosid}_$temtyp.nc 

     rapatrie $f $MEANY  $f
 
     #  header
     printf "%04d %02d" ${TAG#y} $m >>   $fnino
 
    # nino 1+2   [ -90 W -- -80 W, -10 S -- 10 N ]
    cdfmean  -f $f -v votemper -p T -w $NINO12 1 1 $FULLOPT $VVLOPT | tail -1 | awk '{ printf " %8.5f 0.00", $6 }'  >> $fnino 
    ncrename -h -v mean_votemper,mean_votemper_NINO12 cdfmean.nc
    concat_file ${TAG}m${mm}${xiosid} cdfmean.nc $fnino12_nc

    # nino 3     [ -150 W -- -90 W, -5 S -- 5 N ]
    cdfmean  -f $f -v votemper -p T -w $NINO3 1 1  $FULLOPT $VVLOPT | tail -1 | awk '{ printf " %8.5f 0.00", $6 }'  >> $fnino 
    ncrename -h -v mean_votemper,mean_votemper_NINO3 cdfmean.nc
    concat_file ${TAG}m${mm}${xiosid} cdfmean.nc $fnino3_nc

    # nino 4     [ -200 W -- -150 W, -5 S -- 5 N ]
    cdfmean  -f $f -v votemper -p T -w $NINO4 1 1 $FULLOPT $VVLOPT | tail -1 | awk '{ printf " %8.5f 0.00", $6 }'  >> $fnino  
    ncrename -h -v mean_votemper,mean_votemper_NINO4 cdfmean.nc
    concat_file ${TAG}m${mm}${xiosid} cdfmean.nc $fnino4_nc

    # nino 3.4   [ -170 W -- -120 W, -% S -- % N ]
    cdfmean  -f $f -v votemper -p T -w $NINO34 1 1 $FULLOPT $VVLOPT | tail -1 | awk '{ printf " %8.5f 0.00\n", $6 }'  >> $fnino 
    ncrename -h -v mean_votemper,mean_votemper_NINO34 cdfmean.nc
    concat_file ${TAG}m${mm}${xiosid} cdfmean.nc $fnino34_nc
 
   done
 
   merge_files $fnino_nc $fnino12_nc $fnino3_nc $fnino4_nc $fnino34_nc
   ncks -h -x -v mean_3Dvotemper $fnino_nc ztmp.nc ; mv ztmp.nc $fnino_nc
   expatrie $fnino_nc $DIAGS/NC  $fnino_nc
fi

# Transport: Input files: VT, gridU, gridV, mesh mask, section.dat
#  keyword : TRP    file_id : transport
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
if [            $TRP != 0    ] ; then
  file_lst_txt=''
  file_lst=''
  # clean eventually old x_transport.nc files in this current directory
  \rm -f *transports.nc
   # section.dat describes the position (I,J) of the sections to monitor
   # ./create_sections_list ${CONFIG%.*}   # to skip .Lxx part of the config name
   ../create_sections_list ${CONFIG} 

  for TAG in $(mktaglist $TRP) ; do
 
   # get VT , gridU, gridV files
   rapatrie ${CONFCASE}_${TAG}_${vttyp}.nc $MEANY ${CONFCASE}_${TAG}_${vttyp}.nc
   rapatrie ${CONFCASE}_${TAG}_${uttyp}.nc $MEANY ${CONFCASE}_${TAG}_${uttyp}.nc
   rapatrie ${CONFCASE}_${TAG}_$uzotyp.nc $MEANY ${CONFCASE}_${TAG}_$uzotyp.nc
   rapatrie ${CONFCASE}_${TAG}_$vmetyp.nc $MEANY ${CONFCASE}_${TAG}_$vmetyp.nc
 
   # get mesh mask files
   rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
   rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc $IDIR mesh_hgr.nc
   rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc $IDIR mesh_zgr.nc
 
   # Ascii output file:
   suf=$( getsuffix $TAG )
   fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}
   fsection=${fbase}_section_monitor.txt
 
   MONTH=`echo ${TAG} | awk -Fm '{print $2}'`
   echo $YEAR $MONTH >> $fsection
   # modification of cdftransport : take new arguments (-ut, -utvar -vtvar  ... when ut and vt not in the same file (VT)
   # note that uttyp vttyp as well as utvar usvar vtvar vsvar are set in config_def
   cdftransport   -vt ${CONFCASE}_${TAG}_${vttyp}.nc -ut ${CONFCASE}_${TAG}_${uttyp}.nc\
                  -vtvar ${vtvar} ${vsvar} -utvar ${utvar} ${usvar} \
                  -u ${CONFCASE}_${TAG}_$uzotyp.nc \
                  -v ${CONFCASE}_${TAG}_$vmetyp.nc $FULLOPT < section.dat >> $fsection
 
   # eliminate garbage from txt file ...
   grep -v Give $fsection | grep -v level | grep -v IMAX | grep -v FROM > tmp
   mv -f tmp $fsection

   file_lst_txt=$( filter_list $file_lst_txt $fsection )

   listfiles=$( ls | grep -e "^[0-9]" | grep transports.nc )

   for file in $listfiles ; do
       concat_file ${TAG} $file ${fbase}_$file  
       file_lst=$( filter_list $file_lst ${fbase}_$file )
       \rm -f $file
   done
  done  # loop on tags
  
  # dispose TXT files
  for f in $file_lst_txt ; do
     define_diags_dir $f
     expatrie $f $DIAGSOUT $f
  done

  # merge matching nc files
  for suf in _1m _1y ; do
    fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}
    ftrp_nc=${fbase}_TRANSPORTS.nc
    tmplst=''
    for f in $file_lst ; do
      tmplst="$tmplst $(echo $f | grep $fbase )"
    done
    merge_files $ftrp_nc $tmplst
    if [ -f $ftrp_nc ] ; then
      define_diags_dir $ftrp_nc
      expatrie  $ftrp_nc $DIAGSOUT $ftrp_nc
    fi
  done

fi
 
# DCT :Density Class transport: Input files : gridT, gridU gridV, mesh mask, dens_section.dat
#  keyword : DCT   file_id :  trpsig
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
if [ $DCT != 0 ] ; then
   TAG=y${YEAR}
  # dens_section.dat describe the sections (either zonal or meridional) 
  # where the DCT is computed: it is buildt by a  DMONTOOLS script
  #./create_sections_list ${CONFIG%.*}   # to skip .Lxx part of the config name
  ../create_sections_list ${CONFIG}   

  # get mesh mask files
  rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
  rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc $IDIR mesh_hgr.nc
  rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc $IDIR mesh_zgr.nc

  # due to the large amount of files that are produced by this diags, 
  # we prefer to keep them on a separate directory
  chkdirg ${CONFIG}/${CONFCASE}-TRPSIG/
  chkdirg ${CONFIG}/${CONFCASE}-TRPSIG/$YEAR/
  chkdirg $DIAGS/TXT/TRPSIG/

  # also need temporary directories in the actual directory:
  chkdir ${CONFIG}
  chkdir ${CONFIG}/${CONFCASE}-TRPSIG
  chkdir ${CONFIG}/${CONFCASE}-TRPSIG/$YEAR/

  TRPSIGY=${CONFIG}/${CONFCASE}-TRPSIG/$YEAR/

  file_lst=''
  for m in $(seq 1 12) ; do
    mm=$(printf "%02d" $m)
    suf=$( getsuffix ${TAG}m${mm}${xiosid} )
    fbase=${CONFCASE}_${TAG}${xiosid}${suf}

    tfich=${CONFCASE}_${TAG}m${mm}${xiosid}_gridT.nc 
    ufich=$(echo  $tfich | sed -e "s/gridT/$uzotyp/" )
    vfich=$(echo  $tfich | sed -e "s/gridT/$vmetyp/" )

    #get files on ergon
    rapatrie  $tfich $MEANY  $tfich
    rapatrie  $ufich $MEANY  $ufich
    rapatrie  $vfich $MEANY  $vfich
    
    #retrieve tag time from file name
    tag=$(echo $tfich | sed -e "s/${CONFCASE}_//" -e 's/_gridT.nc//')

    #echo $tag > ${CONFCASE}_y${tag}_trpsig_monitor.lst
    if [ $VVL = 1 ] ; then
       wfich=$(echo  $tfich | sed -e 's/gridT/gridW/' )
       rapatrie  $wfich $MEANY  $wfich
       zVVLOPT="$VVLOPT $wfich"
    else
      zVVLOPT=""
    fi

    cdfsigtrp -t $tfich -u $ufich -v $vfich -smin 21 -smax 30 -nbins 180 $FULLOPT $zVVLOPT # -print  >>  ${CONFCASE}_y${tag}_trpsig_monitor.lst
    # save netcdf files ( one per section )
    listfiles=$( ls | grep -e "^[0-9]" | grep trpsig.nc  )

    for file in $listfiles ; do
       concat_file ${TAG}m${mm}${xiosid} $file ${fbase}_$file  # this is one monthly file to be archived
       file_lst=$( filter_list $file_lst ${fbase}_$file )
       mv $file $TRPSIGY/${CONFCASE}_${tag}_$file     # we need individual monthly file for cdfmoyweighted
    done

  done  # month loop

  # merge matching nc files
    fbase=${CONFCASE}_y${YEAR}${xiosid}_1m
    ftrpsig_nc=${fbase}_TRPSIG.nc
    tmplst=''
    for f in $file_lst ; do
      tmplst="$tmplst $(echo $f | grep $fbase )"
    done
    merge_files $ftrpsig_nc $tmplst
    if [ -f $ftrpsig_nc ] ; then
      define_diags_dir $ftrpsig_nc
      expatrie  $ftrpsig_nc $DIAGSOUT $ftrpsig_nc
    fi

  here=$(pwd)  # save the actual directory path
  cd $TRPSIGY
  file_lst=''
  # compute mean nc files : all sections are mixed in this dir with 12 months each 
  # isolate sections from m01 files whose name is similar to 
  #  NATL025-GRD83_y1999m01_01_Denmark_strait_trpsig.nc
  section_list=''
  for f in *m01${xiosid}_*trpsig.nc ; do
   section=${f%_trpsig.nc} ; section=${section#*m01${xiosid}_}
   section_list="$section_list $section"
  done

  for section in $section_list ; do
   cdfmoy_weighted -l ${CONFCASE}_${TAG}m??${xiosid}_${section}_trpsig.nc 
   froot=${CONFCASE}_${TAG}${xiosid}_1y_${section}_trpsig
   concat_file ${TAG} cdfmoy_weighted.nc  $froot.nc
   file_lst=$( filter_list $file_lst $froot.nc )
  done
  
  # save yearly files
  # merge matching nc files
  fbase=${CONFCASE}_y${YEAR}${xiosid}_1y
  ftrpsig_nc=${fbase}_TRPSIG.nc
  tmplst=''
  for f in $file_lst ; do
    tmplst="$tmplst $(echo $f | grep $fbase )"
  done
  merge_files $ftrpsig_nc $tmplst
  if [ -f $ftrpsig_nc ] ; then
    define_diags_dir $ftrpsig_nc
    expatrie  $ftrpsig_nc $DIAGSOUT $ftrpsig_nc
  fi

   # return to tmpdir
   cd $here
   # Erase the TRPSIG tree for this current year
   \rm -rf ${CONFIG} ${CONFCASE}_y*_trpsig.txt *.mtl
fi

# Heat and Salt Meridional Transport : Input files : VT, mesh mask, new_maskglo
#  keyword : MHT   file_id :  hflx
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
if [            $MHT  !=  0   ] ; then
  file_lst=''
  for TAG in $(mktaglist $MHT) ; do
# (a) From advection:
#--------------------
   # get VT  files
   rapatrie ${CONFCASE}_${TAG}_${vttyp}.nc $MEANY ${CONFCASE}_${TAG}_${vttyp}.nc
 
   # get mesh mask files + new_maskglo
   rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
   rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc $IDIR mesh_hgr.nc
   rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc $IDIR mesh_zgr.nc
   if (( $orca != 0 )) ; then rapatrie  $fbasinmask $IDIR $fbasinmask ; fi
 
   # output files:
   suf=$( getsuffix $TAG )
   fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}
   fmhst=${fbase}_mhst.nc
   
   # Netcdf output files: (both head and salt in 2 separated variables)
   cdfmhst  -vt ${CONFCASE}_${TAG}_${vttyp}.nc \
        -vtvar $vtvar $vsvar -MST $FULLOPT  # Save Meridional salt transport as well
   concat_file $TAG mhst.nc $fmhst

   # save file list ( to be sorted later to eliminate duplicate entries )
   file_lst=$( filter_list $file_lst $fmhst )
 
# (b) from Surface Heat fluxes
#-----------------------------
   fhflx=${fbase}_hflx.nc
   rapatrie ${CONFCASE}_${TAG}_$flxtyp.nc $MEANY  ${CONFCASE}_${TAG}_$flxtyp.nc
   zflxfil=${CONFCASE}_${TAG}_$flxtyp.nc

   cdfhflx  -f $zflxfil
   concat_file $TAG cdfhflx.nc $fhflx
   file_lst=$( filter_list $file_lst $fhflx )
 
    \rm hflx.out cdfhflx.nc
  done
  
  # dispose files in the ad-hoc -DIAGS/xxx directory
  # merge matching nc files
  for suf in _1m _1y ; do
    fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}
    fmht_nc=${fbase}_MHT.nc
    tmplst=''
    for f in $file_lst ; do
      tmplst="$tmplst $(echo $f | grep $fbase )"
    done
    merge_files $fmht_nc $tmplst
    if [ -f $fmht_nc ] ; then
      define_diags_dir $fmht_nc
      expatrie  $fmht_nc $DIAGSOUT $fmht_nc
    fi
  done

fi

# MAX and MIN of MOC: requires that MOC files already exists
#  keyword : MAXMOC   file_id : Glo_maxmoc Glo_minmoc   Atl_maxmoc Atl_minmoc 
#                               Inp_minmoc Inp_minmoc2  Aus_maxmoc Aus_minmoc
#                               Glo_maxmoc40N Glo_maxmoc30S Atl_maxmoc40N Atl_maxmoc30S
#                               Inp_minmoc30S  Aus_maxmoc50S Glo_maxmoc15S
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
if [            $MAXMOC  !=  0    ] ; then

# function rename_maxmoc : append id to variable name
# eg : rename_maxmoc  maxmoc.nc Atl_maxmoc30S
rename_maxmoc()   {
   for var in maxmoc minmoc latmaxmoc latminmoc depthmaxmoc depthminmoc ; do
      ncrename -h -v $var,${var}_$2 $1
   done
                  }

  file_lst_txt=''
  file_lst=''
  for TAG in $(mktaglist $MAXMOC) ; do
   f=moc.nc
   rapatrie ${CONFCASE}_${TAG}_MOC.nc $MEANY $f

   # output file
   MONTH=`echo ${TAG} | awk -Fm '{print $2}'`
   suf=$( getsuffix $TAG )

   fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}
   fmaxmoc=${fbase}_minmaxmoc.txt
   echo $YEAR $MONTH > $fmaxmoc
   fmaxmoc40=${fbase}_maxmoc40.txt
   echo $YEAR $MONTH > $fmaxmoc40
   file_lst_txt=$( filter_list $file_lst_txt $fmaxmoc $fmaxmoc40 )

   fglomaxmoc=${fbase}_Glo_maxmoc.nc
   fglominmoc=${fbase}_Glo_minmoc.nc
   fatlmaxmoc=${fbase}_Atl_maxmoc.nc
   fatlminmoc=${fbase}_Atl_minmoc.nc
   finpminmoc=${fbase}_Inp_minmoc.nc
   finpminmoc2=${fbase}_Inp_minmoc2.nc
   fausmaxmoc=${fbase}_Aus_maxmoc.nc
   fausminmoc=${fbase}_Aus_minmoc.nc
   # for maxmoc at specified lon/lat
   fglomaxmoc40n=${fbase}_Glo_maxmoc40N.nc
   fglomaxmoc30s=${fbase}_Glo_maxmoc30S.nc
   fglomaxmoc15s=${fbase}_Glo_maxmoc15S.nc
   fatlmaxmoc40n=${fbase}_Atl_maxmoc40N.nc
   fatlmaxmoc30s=${fbase}_Atl_maxmoc30S.nc
   finpminmoc30s=${fbase}_Inp_minmoc30S.nc
   fausmaxmoc50s=${fbase}_Aus_maxmoc50S.nc

   case $CONFIG in
        PERIANT05 | PERIANT025 | PERIANT8 )

   #AUS
   printf "%s" 'Aus ' >>  $fmaxmoc ; cdfmaxmoc -f $f -b glo -w -70 0 0 2000   | grep Maximum >> $fmaxmoc
   rename_maxmoc maxmoc.nc Glo_maxmoc
   concat_file $TAG maxmoc.nc $fglomaxmoc
   file_lst=$( filter_list $file_lst $fglomaxmoc )

   printf "%s" 'Aus ' >>  $fmaxmoc ; cdfmaxmoc -f $f -b glo -w -70 0 2000 5500  | grep Minimum >> $fmaxmoc
   rename_maxmoc maxmoc.nc Glo_minmoc
   concat_file $TAG maxmoc.nc $fglominmoc
   file_lst=$( filter_list $file_lst $fglominmoc )  ;;

        EORCA12 | EORCA12.L46 | EORCA12.L75 | eORCA12.L75 | ORCA12 | ORCA12.L46 | ORCA12.L75 | ORCA025 | ORCA025.L75 | eORCA025.L75 | ORCA025.L300 | ORCA05 | ORCA2 | ORCA246 )
   # GLO
   printf "%s" 'Glo ' >>  $fmaxmoc ; cdfmaxmoc -f $f -b glo -w 20 60 500 2000 | grep Maximum >> $fmaxmoc
   rename_maxmoc maxmoc.nc Glo_maxmoc
   concat_file $TAG maxmoc.nc $fglomaxmoc
   file_lst=$( filter_list $file_lst $fglomaxmoc )

   printf "%s" 'Glo ' >>  $fmaxmoc ; cdfmaxmoc -f $f -b glo -w -40 30 2000 5500 | grep Minimum >> $fmaxmoc
   rename_maxmoc maxmoc.nc Glo_minmoc
   concat_file $TAG maxmoc.nc $fglominmoc
   file_lst=$( filter_list $file_lst $fglominmoc )


   # ATL
   printf "%s" 'Atl ' >>  $fmaxmoc ; cdfmaxmoc -f $f -b atl -w 0 60 500 2000 | grep Maximum >> $fmaxmoc
   rename_maxmoc maxmoc.nc Atl_maxmoc
   concat_file $TAG maxmoc.nc $fatlmaxmoc
   file_lst=$( filter_list $file_lst $fatlmaxmoc )

   printf "%s" 'Atl ' >>  $fmaxmoc ; cdfmaxmoc -f $f -b atl -w -20 40 2000 5500 | grep Minimum  >> $fmaxmoc
   rename_maxmoc maxmoc.nc Atl_minmoc
   concat_file $TAG maxmoc.nc $fatlminmoc
   file_lst=$( filter_list $file_lst $fatlminmoc )


   #INP
   printf "%s" 'Inp ' >>  $fmaxmoc ; cdfmaxmoc -f $f -b inp -w 15 50 100 1000 | grep Minimum >> $fmaxmoc
   rename_maxmoc maxmoc.nc Inp_minmoc
   concat_file $TAG maxmoc.nc $finpminmoc
   file_lst=$( filter_list $file_lst $finpminmoc )

   printf "%s" 'Inp ' >>  $fmaxmoc ; cdfmaxmoc -f $f -b inp -w -30 20 1000 5500  | grep Minimum >> $fmaxmoc
   rename_maxmoc maxmoc.nc Inp_minmoc2
   concat_file $TAG maxmoc.nc $finpminmoc2
   file_lst=$( filter_list $file_lst $finpminmoc2 )


   #AUS
   printf "%s" 'Aus ' >>  $fmaxmoc ; cdfmaxmoc -f $f -b glo -w -70 0 0 2000   | grep Maximum >> $fmaxmoc
   rename_maxmoc maxmoc.nc Aus_maxmoc
   concat_file $TAG maxmoc.nc $fausmaxmoc
   file_lst=$( filter_list $file_lst $fausmaxmoc )

   printf "%s" 'Aus ' >>  $fmaxmoc ; cdfmaxmoc -f $f -b glo -w -70 0 2000 5500  | grep Minimum >> $fmaxmoc
   rename_maxmoc maxmoc.nc Aus_minmoc
   concat_file $TAG maxmoc.nc $fausminmoc
   file_lst=$( filter_list $file_lst $fausminmoc )

   # Max and Min of MOC at some specific latitudes
   # GLO  MAX at 40 N and 30S
   printf "%s" 'Glo ' >>  $fmaxmoc40 ; cdfmaxmoc -f $f -b glo -w 40 40 500 2000 | grep Maximum >> $fmaxmoc40
   rename_maxmoc maxmoc.nc Glo_maxmoc40N
   concat_file $TAG maxmoc.nc $fglomaxmoc40n
   file_lst=$( filter_list $file_lst $fglomaxmoc40n )

   printf "%s" 'Glo ' >>  $fmaxmoc40 ; cdfmaxmoc -f $f -b glo -w -30 -30 500  5500 | grep Maximum >> $fmaxmoc40
   rename_maxmoc maxmoc.nc Glo_maxmoc30S
   concat_file $TAG maxmoc.nc $fglomaxmoc30s
   file_lst=$( filter_list $file_lst $fglomaxmoc30s )


   # ATL  MAX at 40N and 30S
   printf "%s" 'Atl ' >>  $fmaxmoc40 ; cdfmaxmoc -f $f -b atl -w 40 40 500 2000 | grep Maximum >> $fmaxmoc40
   rename_maxmoc maxmoc.nc Atl_maxmoc40N
   concat_file $TAG maxmoc.nc $fatlmaxmoc40n
   file_lst=$( filter_list $file_lst $fatlmaxmoc40n )

   printf "%s" 'Atl ' >>  $fmaxmoc40 ; cdfmaxmoc -f $f -b atl -w -30 -30  500 5000 | grep Maximum >> $fmaxmoc40
   rename_maxmoc maxmoc.nc Atl_maxmoc30S
   concat_file $TAG maxmoc.nc $fatlmaxmoc30s
   file_lst=$( filter_list $file_lst $fatlmaxmoc30s )


   #INP  Min at 30 S
   printf "%s" 'Inp ' >>  $fmaxmoc40 ; cdfmaxmoc -f $f -b inp -w -30 -30 1000 5500  | grep Minimum >> $fmaxmoc40
   rename_maxmoc maxmoc.nc Inp_minmoc30S
   concat_file $TAG maxmoc.nc $finpminmoc30s
   file_lst=$( filter_list $file_lst $finpminmoc30s )


   #AUS  MAX at 50 S
   printf "%s" 'Aus ' >>  $fmaxmoc40 ; cdfmaxmoc -f $f -b glo -w -50 -50 0 2000   | grep Maximum >> $fmaxmoc40
   rename_maxmoc maxmoc.nc Aus_maxmoc50S
   concat_file $TAG maxmoc.nc $fausmaxmoc50s
   file_lst=$( filter_list $file_lst $fausmaxmoc50s ) ;;

       # NATL configuration
        NATL025 | NATL4 | NATL12 | NNATL12 )
   # GLO
   printf "%s" 'Glo ' >>  $fmaxmoc ; cdfmaxmoc -f $f -b glo -w 20 60 500 2000 | grep Maximum >> $fmaxmoc
   rename_maxmoc maxmoc.nc Glo_maxmoc
   concat_file $TAG maxmoc.nc $fglomaxmoc
   file_lst=$( filter_list $file_lst $fglomaxmoc )

   printf "%s" 'Glo ' >>  $fmaxmoc ; cdfmaxmoc -f $f -b glo -w -40 30 2000 5500 | grep Minimum >> $fmaxmoc
   rename_maxmoc maxmoc.nc Glo_minmoc
   concat_file $TAG maxmoc.nc $fglominmoc
   file_lst=$( filter_list $file_lst $fglominmoc )


   # Max and Min of MOC at some specific latitudes
   # GLO  MAX at 40 N and 30S
   printf "%s" 'Glo ' >>  $fmaxmoc40 ; cdfmaxmoc -f $f -b glo -w 40 40 500 2000 | grep Maximum >> $fmaxmoc40
   rename_maxmoc maxmoc.nc Glo_maxmoc40N
   concat_file $TAG maxmoc.nc $fglomaxmoc40n
   file_lst=$( filter_list $file_lst $fglomaxmoc40n )

   printf "%s" 'Glo ' >>  $fmaxmoc40 ; cdfmaxmoc -f $f -b glo -w -15 -15 500  5500 | grep Maximum >> $fmaxmoc40
   rename_maxmoc maxmoc.nc Glo_maxmoc15S
   concat_file $TAG maxmoc.nc $fglomaxmoc15s
   file_lst=$( filter_list $file_lst $fglomaxmoc15s ) ;;

   esac
   # clean for next year 
   \rm moc.nc 
  done  # loop on TAG
  
  # dispose txt file first
  for f in $file_lst_txt ; do 
    define_diags_dir $f
    expatrie $f $DIAGSOUT $f
  done

  # Concatenate all files into  a single one
  fileout_lst=''
  for f in $file_lst ; do
    suf=$( echo $f | awk -F_ '{ print $3 }' )  # suf is then 1m or 1y
    fmaxmocall=${CONFCASE}_y${YEAR}${xiosid}_${suf}_MAXMOC.nc
    ncks -h -A $f $fmaxmocall
    fileout_lst=$( filter_list $fileout_lst $fmaxmocall )
    # clean temporary files
    \rm -f $f 
  done
     
  # dispose file
  for f in $fileout_lst ; do
   define_diags_dir $f 
   expatrie $f $DIAGSOUT $f
  done
fi


# Compare zonal current with TAO moorings: Input file: gridU, gridV, gridT2, coordinates
#  keyword : TAO  file_id : VELOCITY_LATLON VELOCITY_LATLON_UC
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
if [             $TAO !=  0   ] ; then
  file_lst=''
  for TAG in $(mktaglist $TAO) ; do
    
     suf=$( getsuffix $TAG )
     fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}_VELOCITY

     LAT=0
     u=${CONFCASE}_${TAG}_$uzotyp.nc
     v=${CONFCASE}_${TAG}_$vmetyp.nc
     t2=${CONFCASE}_${TAG}_gridT2.nc 

     rapatrie $u  $MEANY $u
     rapatrie $v  $MEANY $v
     rapatrie $t2 $MEANY $t2

     rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc  $IDIR mesh_hgr.nc

     cdfvita -u $u -v $v -t $t2 -o ${CONFCASE}_${TAG}_vita.nc $NCOPT

     for LON in 156 165 -110 -140 -170 ; do

        I=$( cdffindij -w $LON $LON $LAT $LAT -c mesh_hgr.nc -p T | tail -2 | head -1  | awk '{print $1 }' )
        J=$( cdffindij -w $LON $LON $LAT $LAT -c mesh_hgr.nc -p T | tail -2 | head -1  | awk '{print $3 }' )
        LONG=${LON}e
        LATI=${LAT}n
        if (( $LON < 0 )) ; then LONG=${LON}w ; fi
        if (( $LAT < 0 )) ; then LATI=${LAT}s ; fi
        LONG=$( echo $LONG | sed -e 's/-//' )
        LATI=$( echo $LATI | sed -e 's/-//' )
        file=${CONFCASE}_${TAG}_vita.nc
        fvel=${fbase}_${LATI}${LONG}.nc
        varu=sovitua
        cdfprofile -IJ $I $J -f $file -v $varu  # extract profile at given position for given variable
        ncrename -h -O -v sovitua,u_$LONG profile.nc

        concat_file $TAG profile.nc $fvel
        file_lst=$( filter_list $file_lst $fvel )
     done
  done

  # under current time series, from vertical profiles files  ( only based on nco tools)
  file_lst_uc=''  # reset file list for UC files
  for suf in _1m _1y ; do   	
     fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}_VELOCITY
     if [ -f ${fbase}_0n110w.nc ] ; then  # assume that if the 1rst file exist for this suffix, all exist
       # 110W  depth = 80 m
       fvel=${fbase}_0n110w ; dep=80
       cdfprofile -IJ 1 1 -f $fvel.nc -v u_110w -dep $dep
       mv profile.nc ${fvel}_UC.nc
       ncrename -h -O -v u_110w,u_110w_UC ${fvel}_UC.nc 
       file_lst_uc=$( filter_list $file_lst_uc ${fvel}_UC.nc )

     # 140W  depth = 120m
       fvel=${fbase}_0n140w  ; dep=120
       cdfprofile -IJ 1 1 -f $fvel.nc -v u_140w -dep $dep
       mv profile.nc ${fvel}_UC.nc
       ncrename -h -O -v u_140w,u_140w_UC ${fvel}_UC.nc 
       file_lst_uc=$( filter_list $file_lst_uc ${fvel}_UC.nc )

     # 170W  depth = 150m
       fvel=${fbase}_0n170w  ; dep=150
       cdfprofile -IJ 1 1 -f $fvel.nc -v u_170w -dep $dep
       mv profile.nc ${fvel}_UC.nc
       ncrename -h -O -v u_170w,u_170w_UC ${fvel}_UC.nc
       file_lst_uc=$( filter_list $file_lst_uc ${fvel}_UC.nc )

     # 156E  depth = 200m
       fvel=${fbase}_0n156e  ; dep=200
       cdfprofile -IJ 1 1 -f $fvel.nc -v u_156e -dep $dep
       mv profile.nc ${fvel}_UC.nc
       ncrename -h -O -v u_156e,u_156e_UC ${fvel}_UC.nc
       file_lst_uc=$( filter_list $file_lst_uc ${fvel}_UC.nc )

     # 165E  depth = 200m
       fvel=${fbase}_0n165e  ; dep=200
       cdfprofile -IJ 1 1 -f $fvel.nc -v u_165e -dep $dep
       mv profile.nc ${fvel}_UC.nc
       ncrename -h -O -v u_165e,u_165e_UC ${fvel}_UC.nc
       file_lst_uc=$( filter_list $file_lst_uc ${fvel}_UC.nc )
     fi
  done

  # remove useless var
  for f in $file_lst_uc ; do
    ncwa -h -F -O -a depth $f -o $f     # remove depth dim
    ncks -h -F -O -x -v depth $f -o $f  # remove depth var
  done

  # merge matching nc files
  file_lst="$file_lst $file_lst_uc"
  for suf in _1m _1y ; do
    fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}
    ftao_nc=${fbase}_TAO.nc
    tmplst=''
    for f in $file_lst ; do
      tmplst="$tmplst $(echo $f | grep $fbase )"
    done
    merge_files $ftao_nc $tmplst
    if [ -f $ftao_nc ] ; then
      define_diags_dir $ftao_nc
      expatrie  $ftao_nc $DIAGSOUT $ftao_nc
    fi
  done
fi

#                        #####################################
#                        ### T O P   B A S E D   D I A G S ###
#                        #####################################
# TRACER DIAGS  : Input files : ptrcT, mesh mask
#  keyword : TRACER   file_id : TRCmean  TRCzonalmean_conc TRCzonalmean_flx TRCzonalsum_flx pendep fracinv
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
if [ $TRACER != 0 ] ; then
   file_lst=''
 for TAG in $(mktaglist $TRACER) ; do
   # get mesh mask files
   rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
   rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc $IDIR mesh_hgr.nc
   rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc $IDIR mesh_zgr.nc
   if (( $orca != 0 )) ; then rapatrie  $fbasinmask $IDIR $fbasinmask ; fi
 
   # get tracer file from ergon: note that this is from -S dir (5 day average ... to discuss ...)
   rapatrie ${CONFCASE}_${TAG}_ptrcT.nc $MEANY ${CONFCASE}_${TAG}_ptrcT.nc
   rapatrie ${CONFCASE}_${TAG}_diadT.nc $MEANY ${CONFCASE}_${TAG}_diadT.nc
   rapatrie ${CONFCASE}_${TAG}_ptrcT.nc $MEANY ${CONFCASE}_${TAG}_ptrcT.nc
 
   # output files:
   suf=$(getsuffix $TAG )
   fbase=${CONFCASE}_y${YEAR}${xiosid}${suf}
   ftrc=${fbase}_TRCmean.txt
   ftrc_zomean=${fbase}_TRCzonalmean_flx.txt
   ftrc_zosum=${fbase}_TRCzonalsum_flx.txt
   ftrc_zosurf=${fbase}_TRCzonalsurf_flx.txt

   ftrc_nc=${fbase}_TRCmean.nc
#  ftrc_zomean_nc=${fbase}_TRCzonalmean_flx.nc
#  ftrc_zosum_nc=${fbase}_TRCzonalsum_flx.nc
#  ftrc_zosurf_nc=${fbase}_TRCzonalsurf_flx.nc
 
   # Number of mol in the ocean ...
   printf "%04d "  $YEAR   >>  $ftrc
 
   # CFC11
   \rm -f tmp1
   cdfmean  -f ${CONFCASE}_${TAG}_diadT.nc  -v INVCFC -p T $FULLOPT > tmp1
   area=$(cat tmp1 |  grep -e 'Mean value at level' | awk ' {print $12}')
   mean=$(cat tmp1 |  grep -e 'Mean value over the ocean' | awk ' {print $6}')
   total=$(echo $mean $area |  awk '{print $1 * $2 }' )
   printf "%s "  $total  >> $ftrc
   concat_file $TAG  cdfmean.nc $ftrc_nc
   file_lst=$( filter_list $file_lst $ftrc_nc)
 
   if [ $TRACER_BC14 != 0 ] ; then
     # B-C14
     \rm -f tmp1
     cdfmean  -f ${CONFCASE}_${TAG}_ptrcT.nc  -v invc14 -p T $FULLOPT > tmp1
     area=$(cat tmp1 |  grep -e 'Mean value at level' | awk ' {print $12}')
     mean=$(cat tmp1 |  grep -e 'Mean value over the ocean' | awk ' {print $6}')
     total=$(echo $mean $area |  awk '{print $1 * $2 }' )
     printf "%s \n"  $total  >> $ftrc
     # append cdfmean.nc variable to the already existing nc file
     concat_file $TAG  cdfmean.nc $ftrc_nc
     file_lst=$( filter_list $file_lst $ftrc_nc)
   fi
 
   # zonal integral of inventories
   cdfzonalsum  -f ${CONFCASE}_${TAG}_ptrcT.nc  -p T
   expatrie zonalsum.nc $MEANY ${CONFCASE}_${TAG}_TRCzonalsum_conc.nc  # in MEANDIR, not a time-series
   cdfzonalsum  -f ${CONFCASE}_${TAG}_diadT.nc  -p T
   expatrie zonalsum.nc $MEANY ${CONFCASE}_${TAG}_TRCzonalsum_flx.nc
 
   # zonal means
   cdfzonalmean  -f ${CONFCASE}_${TAG}_ptrcT.nc  -p T
   expatrie zonalmean.nc $MEANY ${CONFCASE}_${TAG}_TRCzonalmean_conc.nc
   cdfzonalmean  -f ${CONFCASE}_${TAG}_diadT.nc  -p T
   expatrie zonalmean.nc $MEANY ${CONFCASE}_${TAG}_TRCzonalmean_flx.nc
 
   # it is used to take only the interesting variables from the results
#   ncks -F -d deptht,1,1 -v zocfc11_glo,zobc14_glo,nav_lon,nav_lat zonalmean.nc zonalsurf.nc
   ncks -h -F -d deptht,1,1 -v zoVCFC_glo,zoRCFC_glo,zoNTCFC_glo,nav_lon,nav_lat zonalmean.nc zonalsurf.nc
 
   # put in ascii format the 1D profiles
   cdfzonalout -f zonalmean.nc >> $ftrc_zomean
   cdfzonalout -f zonalsum.nc >>  $ftrc_zosum
   cdfzonalout -f zonalsurf.nc >>  $ftrc_zosurf
   file_lst=$( filter_list $file_lst $ftrc_zomean $ftrc_zosum $ftrc_zosurf )
 
   # penetration depth
   cdfpendep -trc ${CONFCASE}_${TAG}_ptrcT.nc ${CONFCASE}_${TAG}_diadT.nc \
            -i {CONFCASE}_${TAG}_ptrcT.nc ${CONFCASE}_${TAG}_diadT.nc  -vinv INVCFC -vtrc CFC11
   expatrie pendep.nc $MEANY ${CONFCASE}_${TAG}_pendep.nc

   # Fraction of inventory
   cdffracinv -trc ${CONFCASE}_${TAG}_diadT.nc -inv INVCFC
   expatrie fracinv.nc $MEANY ${CONFCASE}_${TAG}_fracinv.nc
 done

 # dispose time-series files
 for f in $file_lst ; do
   define_diags_dir $f
   expatrie $f $DIAGSOUT $f
 done
 
fi
# PISCES PROFILES : Input files : ptrcT
#  keyword : BIO_PROFILE   file_id: bioprofile
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
if [ $BIO_PROFILE != 0 ] ; then

   file_lst=''
   for TAG in $( mktaglist $BIO_PROFILE ) ; do
     # get mesh mask files
     rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
     rapatrie  ${MESH_MASK_ID}_mesh_hgr.nc $IDIR mesh_hgr.nc
     rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc $IDIR mesh_zgr.nc

     # get tracer file from ergon: 
     rapatrie ${CONFCASE}_${TAG}_ptrcT.nc $MEANY ${CONFCASE}_${TAG}_ptrcT.nc

     # Parameters for integration
     latmin=$( cdffindij -w -180 180 -75 -45 -c mesh_hgr.nc -p T | tail -2 | head -1 | awk '{ print $4 }' )
   
     # compute vertical profiles
     suf=$(getsuffix $TAG )
     fbioprofile=${CONFCASE}_y${YEAR}${xiosid}${suf}_bioprofile.nc

     jc=0
     for var in DIC Alkalini O2 PO4 Si NO3 Fer DOC ; do 
       cdfmean -f ${CONFCASE}_${TAG}_ptrcT.nc -v $var -p T -w 0 180 1 $latmin 0 46 $FULLOPT
       if [ $jc == 0 ] ; then
         ncks -h -A -v nav_lon,nav_lat,mean_$var cdfmean.nc tmpbioprofile.nc
       else
         ncks -h -A -v mean_$var cdfmean.nc tmpbioprofile.nc
       fi
       jc=$((jc+1))
     done
     concat_file $TAG tmpbioprofile.nc $fbioprofile
     \rm tmpbioprofile.nc
     file_lst=$( filter_list $file_lst $fbioprofile )
   done
   
   # dispose files
   for f in $file_lst ; do
      define_diags_dir $f
      expatrie $f $DIAGSOUT $f
   done

fi

# PISCES integrated values : Input files : ptrcT, diadT
#  keyword : PISCES_INT  file_id : biovertmean
#^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^^
if [ $PISCES_INT != 0 ] ; then
   file_lst=''
   for TAG in $(mktaglist $PISCES_INT ) ; do
     # get mesh mask files
     rapatrie  ${MESH_MASK_ID}_byte_mask.nc $IDIR mask.nc
     rapatrie  ${MESH_MASK_ID}_mesh_zgr.nc $IDIR mesh_zgr.nc

     # get tracer file from ergon:
     rapatrie ${CONFCASE}_${TAG}_ptrcT.nc $MEANY ${CONFCASE}_${TAG}_ptrcT.nc
     rapatrie ${CONFCASE}_${TAG}_diadT.nc $MEANY ${CONFCASE}_${TAG}_diadT.nc
   
     # output files
     suf=$(getsuffix $TAG )
     fbiovert=${CONFCASE}_y${YEAR}${xiosid}${suf}_biovertmean.nc

     jc=0
     # compute vertically integrated mean
     for var in DIC Alkalini O2 PO4 Si NO3 Fer DOC NCHL DCHL POC PHY PHY2 ZOO ZOO2 GOC SFe CFC11; do
       cdfvertmean -f ${CONFCASE}_${TAG}_ptrcT.nc -l $var -p T -zlim 0 150 $FULLOPT
       ncrename -h -v sovertmean,vertmean_${var} vertmean.nc
       if [ $jc == 0 ] ; then
         ncks -h -A -v nav_lon,nav_lat,vertmean_$var vertmean.nc tmpvertmean.nc
       else
         ncks -h -A -v vertmean_$var vertmean.nc tmpvertmean.nc
       fi
       jc=$((jc+1))
     done

     for var in PPPHY2 PPPHY PPNEWN PPNEWD PMO PMO2 PAR PH; do
       cdfvertmean -f ${CONFCASE}_${TAG}_diadT.nc -l $var -p T -zlim 0 150 $FULLOPT
       ncrename -h -v sovertmean,vertmean_${var} vertmean.nc
       ncks -A -v vertmean_$var vertmean.nc tmpvertmean.nc
     done

     concat_file $TAG tmpvertmean.nc $fbiovert
     \rm tmpvertmean.nc
     file_lst=$( filter_list $file_lst $fbiovert )
   done

   # dispose files
   for f in $file_lst ; do
      define_diags_dir $f
      expatrie $f $DIAGSOUT $f
   done

fi
######################################################################
### Clean the working directory :
######################################################################

if [ $RNDTMPDIR == 1 ] ; then

   cd $TMPDIR/$YEAR

else

   cd $R_MONITOR/$YEAR

fi

\rm -f *gridT.nc *$uzotyp.nc *$vmetyp.nc *gridW.nc *$icetyp.nc *VT.nc
\rm -f mesh_hgr.nc mesh_zgr.nc mask.nc

